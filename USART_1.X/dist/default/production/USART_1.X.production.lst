

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat Jul 15 15:31:04 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    14   000000                     
    15                           ; Generated 14/06/2023 GMT
    16                           ; 
    17                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution. Publication is not required when
    31                           ;        this file is used in an embedded application.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC18F45K50 Definitions
    47                           ; 
    48                           ; SFR Addresses
    49   000000                     _RCREG	set	4014
    50   000000                     _TXREG	set	4013
    51   000000                     _ANSELCbits	set	3933
    52   000000                     _TRISCbits	set	3988
    53   000000                     _RCSTAbits	set	4011
    54   000000                     _TXSTAbits	set	4012
    55   000000                     _SPBRG	set	4015
    56                           
    57                           ; #config settings
    58                           
    59                           	psect	cinit
    60   007E1C                     __pcinit:
    61                           	callstack 0
    62   007E1C                     start_initialization:
    63                           	callstack 0
    64   007E1C                     __initialization:
    65                           	callstack 0
    66   007E1C                     end_of_initialization:
    67                           	callstack 0
    68   007E1C                     __end_of__initialization:
    69                           	callstack 0
    70   007E1C  0100               	movlb	0
    71   007E1E  EF15  F03F         	goto	_main	;jump to C main() function
    72                           
    73                           	psect	cstackCOMRAM
    74   000001                     __pcstackCOMRAM:
    75                           	callstack 0
    76   000001                     ?___aldiv:
    77                           	callstack 0
    78   000001                     USART_Tx@data:
    79                           	callstack 0
    80   000001                     ___aldiv@dividend:
    81                           	callstack 0
    82                           
    83                           ; 4 bytes @ 0x0
    84   000001                     	ds	4
    85   000005                     ___aldiv@divisor:
    86                           	callstack 0
    87                           
    88                           ; 4 bytes @ 0x4
    89   000005                     	ds	4
    90   000009                     ___aldiv@counter:
    91                           	callstack 0
    92                           
    93                           ; 1 bytes @ 0x8
    94   000009                     	ds	1
    95   00000A                     ___aldiv@sign:
    96                           	callstack 0
    97                           
    98                           ; 1 bytes @ 0x9
    99   00000A                     	ds	1
   100   00000B                     ___aldiv@quotient:
   101                           	callstack 0
   102                           
   103                           ; 4 bytes @ 0xA
   104   00000B                     	ds	4
   105   00000F                     USART_Init@BAUD:
   106                           	callstack 0
   107                           
   108                           ; 4 bytes @ 0xE
   109   00000F                     	ds	4
   110   000013                     _USART_Init$873:
   111                           	callstack 0
   112                           
   113                           ; 4 bytes @ 0x12
   114   000013                     	ds	4
   115   000017                     ??_main:
   116                           
   117                           ; 1 bytes @ 0x16
   118   000017                     	ds	2
   119                           
   120 ;;
   121 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   122 ;;
   123 ;; *************** function _main *****************
   124 ;; Defined at:
   125 ;;		line 83 in file "maincod.c"
   126 ;; Parameters:    Size  Location     Type
   127 ;;		None
   128 ;; Auto vars:     Size  Location     Type
   129 ;;		None
   130 ;; Return value:  Size  Location     Type
   131 ;;                  1    wreg      void 
   132 ;; Registers used:
   133 ;;		wreg, status,2, status,0, cstack
   134 ;; Tracked objects:
   135 ;;		On entry : 0/0
   136 ;;		On exit  : 0/0
   137 ;;		Unchanged: 0/0
   138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   139 ;;      Params:         0       0       0       0       0       0       0       0       0
   140 ;;      Locals:         0       0       0       0       0       0       0       0       0
   141 ;;      Temps:          2       0       0       0       0       0       0       0       0
   142 ;;      Totals:         2       0       0       0       0       0       0       0       0
   143 ;;Total ram usage:        2 bytes
   144 ;; Hardware stack levels required when called: 2
   145 ;; This function calls:
   146 ;;		_USART_Init
   147 ;;		_USART_Tx
   148 ;; This function is called by:
   149 ;;		Startup code after reset
   150 ;; This function uses a non-reentrant model
   151 ;;
   152                           
   153                           	psect	text0
   154   007E2A                     __ptext0:
   155                           	callstack 0
   156   007E2A                     _main:
   157                           	callstack 29
   158   007E2A                     
   159                           ;maincod.c: 84:     USART_Init(9600);
   160   007E2A  0E80               	movlw	128
   161   007E2C  6E0F               	movwf	USART_Init@BAUD^0,c
   162   007E2E  0E25               	movlw	37
   163   007E30  6E10               	movwf	(USART_Init@BAUD+1)^0,c
   164   007E32  0E00               	movlw	0
   165   007E34  6E11               	movwf	(USART_Init@BAUD+2)^0,c
   166   007E36  0E00               	movlw	0
   167   007E38  6E12               	movwf	(USART_Init@BAUD+3)^0,c
   168   007E3A  EC3F  F03F         	call	_USART_Init	;wreg free
   169   007E3E                     l855:
   170                           
   171                           ;maincod.c: 86:         USART_Tx(0x33);
   172   007E3E  0E33               	movlw	51
   173   007E40  EC11  F03F         	call	_USART_Tx
   174   007E44                     
   175                           ;maincod.c: 87:         _delay((unsigned long)((500)*(12000000/4000.0)));
   176   007E44  0E08               	movlw	8
   177   007E46  6E18               	movwf	(??_main+1)^0,c
   178   007E48  0E9D               	movlw	157
   179   007E4A  6E17               	movwf	??_main^0,c
   180   007E4C  0E06               	movlw	6
   181   007E4E                     u137:
   182   007E4E  2EE8               	decfsz	wreg,f,c
   183   007E50  D7FE               	bra	u137
   184   007E52  2E17               	decfsz	??_main^0,f,c
   185   007E54  D7FC               	bra	u137
   186   007E56  2E18               	decfsz	(??_main+1)^0,f,c
   187   007E58  D7FA               	bra	u137
   188   007E5A                     
   189                           ;maincod.c: 88:         USART_Tx(0x99);
   190   007E5A  0E99               	movlw	153
   191   007E5C  EC11  F03F         	call	_USART_Tx
   192   007E60                     
   193                           ;maincod.c: 89:         _delay((unsigned long)((500)*(12000000/4000.0)));
   194   007E60  0E08               	movlw	8
   195   007E62  6E18               	movwf	(??_main+1)^0,c
   196   007E64  0E9D               	movlw	157
   197   007E66  6E17               	movwf	??_main^0,c
   198   007E68  0E06               	movlw	6
   199   007E6A                     u147:
   200   007E6A  2EE8               	decfsz	wreg,f,c
   201   007E6C  D7FE               	bra	u147
   202   007E6E  2E17               	decfsz	??_main^0,f,c
   203   007E70  D7FC               	bra	u147
   204   007E72  2E18               	decfsz	(??_main+1)^0,f,c
   205   007E74  D7FA               	bra	u147
   206   007E76  EF1F  F03F         	goto	l855
   207   007E7A  EF00  F000         	goto	start
   208   007E7E                     __end_of_main:
   209                           	callstack 0
   210                           
   211 ;; *************** function _USART_Tx *****************
   212 ;; Defined at:
   213 ;;		line 108 in file "USART_libreria.c"
   214 ;; Parameters:    Size  Location     Type
   215 ;;  data            1    wreg     unsigned char 
   216 ;; Auto vars:     Size  Location     Type
   217 ;;  data            1    0[COMRAM] unsigned char 
   218 ;; Return value:  Size  Location     Type
   219 ;;                  1    wreg      void 
   220 ;; Registers used:
   221 ;;		wreg
   222 ;; Tracked objects:
   223 ;;		On entry : 0/0
   224 ;;		On exit  : 0/0
   225 ;;		Unchanged: 0/0
   226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   227 ;;      Params:         0       0       0       0       0       0       0       0       0
   228 ;;      Locals:         1       0       0       0       0       0       0       0       0
   229 ;;      Temps:          0       0       0       0       0       0       0       0       0
   230 ;;      Totals:         1       0       0       0       0       0       0       0       0
   231 ;;Total ram usage:        1 bytes
   232 ;; Hardware stack levels used: 1
   233 ;; This function calls:
   234 ;;		Nothing
   235 ;; This function is called by:
   236 ;;		_main
   237 ;; This function uses a non-reentrant model
   238 ;;
   239                           
   240                           	psect	text1
   241   007E22                     __ptext1:
   242                           	callstack 0
   243   007E22                     _USART_Tx:
   244                           	callstack 30
   245                           
   246                           ;incstack = 0
   247                           ;USART_Tx@data stored from wreg
   248   007E22  6E01               	movwf	USART_Tx@data^0,c
   249   007E24                     
   250                           ;USART_libreria.c: 109:     TXREG = data;
   251   007E24  C001  FFAD         	movff	USART_Tx@data,4013	;volatile
   252   007E28  0012               	return		;funcret
   253   007E2A                     __end_of_USART_Tx:
   254                           	callstack 0
   255                           
   256 ;; *************** function _USART_Init *****************
   257 ;; Defined at:
   258 ;;		line 86 in file "USART_libreria.c"
   259 ;; Parameters:    Size  Location     Type
   260 ;;  BAUD            4   14[COMRAM] long 
   261 ;; Auto vars:     Size  Location     Type
   262 ;;		None
   263 ;; Return value:  Size  Location     Type
   264 ;;                  1    wreg      void 
   265 ;; Registers used:
   266 ;;		wreg, status,2, status,0, cstack
   267 ;; Tracked objects:
   268 ;;		On entry : 0/0
   269 ;;		On exit  : 0/0
   270 ;;		Unchanged: 0/0
   271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   272 ;;      Params:         4       0       0       0       0       0       0       0       0
   273 ;;      Locals:         4       0       0       0       0       0       0       0       0
   274 ;;      Temps:          0       0       0       0       0       0       0       0       0
   275 ;;      Totals:         8       0       0       0       0       0       0       0       0
   276 ;;Total ram usage:        8 bytes
   277 ;; Hardware stack levels used: 1
   278 ;; Hardware stack levels required when called: 1
   279 ;; This function calls:
   280 ;;		___aldiv
   281 ;; This function is called by:
   282 ;;		_main
   283 ;; This function uses a non-reentrant model
   284 ;;
   285                           
   286                           	psect	text2
   287   007E7E                     __ptext2:
   288                           	callstack 0
   289   007E7E                     _USART_Init:
   290                           	callstack 29
   291   007E7E                     
   292                           ;USART_libreria.c: 88:     ANSELCbits.ANSC6 = 0;
   293   007E7E  010F               	movlb	15	; () banked
   294   007E80  9D5D               	bcf	93,6,b	;volatile
   295                           
   296                           ;USART_libreria.c: 89:     ANSELCbits.ANSC7 = 0;
   297   007E82  9F5D               	bcf	93,7,b	;volatile
   298                           
   299                           ;USART_libreria.c: 90:     TRISCbits.RC6 = 0;
   300   007E84  9C94               	bcf	148,6,c	;volatile
   301                           
   302                           ;USART_libreria.c: 91:     TRISCbits.RC7 = 1;
   303   007E86  8E94               	bsf	148,7,c	;volatile
   304   007E88                     
   305                           ; BSR set to: 15
   306                           ;USART_libreria.c: 93:     SPBRG = (unsigned char)(((12000000/BAUD)/64)-1);
   307   007E88  C00F  F005         	movff	USART_Init@BAUD,___aldiv@divisor
   308   007E8C  C010  F006         	movff	USART_Init@BAUD+1,___aldiv@divisor+1
   309   007E90  C011  F007         	movff	USART_Init@BAUD+2,___aldiv@divisor+2
   310   007E94  C012  F008         	movff	USART_Init@BAUD+3,___aldiv@divisor+3
   311   007E98  0E00               	movlw	0
   312   007E9A  6E01               	movwf	___aldiv@dividend^0,c
   313   007E9C  0E1B               	movlw	27
   314   007E9E  6E02               	movwf	(___aldiv@dividend+1)^0,c
   315   007EA0  0EB7               	movlw	183
   316   007EA2  6E03               	movwf	(___aldiv@dividend+2)^0,c
   317   007EA4  0E00               	movlw	0
   318   007EA6  6E04               	movwf	(___aldiv@dividend+3)^0,c
   319   007EA8  EC7A  F03F         	call	___aldiv	;wreg free
   320   007EAC  C001  F013         	movff	?___aldiv,_USART_Init$873
   321   007EB0  C002  F014         	movff	?___aldiv+1,_USART_Init$873+1
   322   007EB4  C003  F015         	movff	?___aldiv+2,_USART_Init$873+2
   323   007EB8  C004  F016         	movff	?___aldiv+3,_USART_Init$873+3
   324                           
   325                           ;USART_libreria.c: 93:     SPBRG = (unsigned char)(((12000000/BAUD)/64)-1);
   326   007EBC  C013  F001         	movff	_USART_Init$873,___aldiv@dividend
   327   007EC0  C014  F002         	movff	_USART_Init$873+1,___aldiv@dividend+1
   328   007EC4  C015  F003         	movff	_USART_Init$873+2,___aldiv@dividend+2
   329   007EC8  C016  F004         	movff	_USART_Init$873+3,___aldiv@dividend+3
   330   007ECC  0E40               	movlw	64
   331   007ECE  6E05               	movwf	___aldiv@divisor^0,c
   332   007ED0  0E00               	movlw	0
   333   007ED2  6E06               	movwf	(___aldiv@divisor+1)^0,c
   334   007ED4  0E00               	movlw	0
   335   007ED6  6E07               	movwf	(___aldiv@divisor+2)^0,c
   336   007ED8  0E00               	movlw	0
   337   007EDA  6E08               	movwf	(___aldiv@divisor+3)^0,c
   338   007EDC  EC7A  F03F         	call	___aldiv	;wreg free
   339   007EE0  0401               	decf	?___aldiv^0,w,c
   340   007EE2  6EAF               	movwf	175,c	;volatile
   341   007EE4                     
   342                           ;USART_libreria.c: 95:     TXSTAbits.BRGH = 0;
   343   007EE4  94AC               	bcf	172,2,c	;volatile
   344   007EE6                     
   345                           ;USART_libreria.c: 96:     TXSTAbits.SYNC = 0;
   346   007EE6  98AC               	bcf	172,4,c	;volatile
   347   007EE8                     
   348                           ;USART_libreria.c: 97:     RCSTAbits.SPEN = 1;
   349   007EE8  8EAB               	bsf	171,7,c	;volatile
   350   007EEA                     
   351                           ;USART_libreria.c: 100:     TXSTAbits.TX9 = 0;
   352   007EEA  9CAC               	bcf	172,6,c	;volatile
   353   007EEC                     
   354                           ;USART_libreria.c: 101:     TXSTAbits.TXEN = 1;
   355   007EEC  8AAC               	bsf	172,5,c	;volatile
   356   007EEE                     
   357                           ;USART_libreria.c: 104:     RCSTAbits.RX9 = 0;
   358   007EEE  9CAB               	bcf	171,6,c	;volatile
   359   007EF0                     
   360                           ;USART_libreria.c: 105:     RCSTAbits.CREN = 1;
   361   007EF0  88AB               	bsf	171,4,c	;volatile
   362   007EF2  0012               	return		;funcret
   363   007EF4                     __end_of_USART_Init:
   364                           	callstack 0
   365                           
   366 ;; *************** function ___aldiv *****************
   367 ;; Defined at:
   368 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\aldiv.c"
   369 ;; Parameters:    Size  Location     Type
   370 ;;  dividend        4    0[COMRAM] long 
   371 ;;  divisor         4    4[COMRAM] long 
   372 ;; Auto vars:     Size  Location     Type
   373 ;;  quotient        4   10[COMRAM] long 
   374 ;;  sign            1    9[COMRAM] unsigned char 
   375 ;;  counter         1    8[COMRAM] unsigned char 
   376 ;; Return value:  Size  Location     Type
   377 ;;                  4    0[COMRAM] long 
   378 ;; Registers used:
   379 ;;		wreg, status,2, status,0
   380 ;; Tracked objects:
   381 ;;		On entry : 0/0
   382 ;;		On exit  : 0/0
   383 ;;		Unchanged: 0/0
   384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   385 ;;      Params:         8       0       0       0       0       0       0       0       0
   386 ;;      Locals:         6       0       0       0       0       0       0       0       0
   387 ;;      Temps:          0       0       0       0       0       0       0       0       0
   388 ;;      Totals:        14       0       0       0       0       0       0       0       0
   389 ;;Total ram usage:       14 bytes
   390 ;; Hardware stack levels used: 1
   391 ;; This function calls:
   392 ;;		Nothing
   393 ;; This function is called by:
   394 ;;		_USART_Init
   395 ;; This function uses a non-reentrant model
   396 ;;
   397                           
   398                           	psect	text3
   399   007EF4                     __ptext3:
   400                           	callstack 0
   401   007EF4                     ___aldiv:
   402                           	callstack 29
   403   007EF4  0E00               	movlw	0
   404   007EF6  6E0A               	movwf	___aldiv@sign^0,c
   405   007EF8  BE08               	btfsc	(___aldiv@divisor+3)^0,7,c
   406   007EFA  EF83  F03F         	goto	u70
   407   007EFE  EF81  F03F         	goto	u71
   408   007F02                     u71:
   409   007F02  EF8D  F03F         	goto	l799
   410   007F06                     u70:
   411   007F06  1E08               	comf	(___aldiv@divisor+3)^0,f,c
   412   007F08  1E07               	comf	(___aldiv@divisor+2)^0,f,c
   413   007F0A  1E06               	comf	(___aldiv@divisor+1)^0,f,c
   414   007F0C  6C05               	negf	___aldiv@divisor^0,c
   415   007F0E  0E00               	movlw	0
   416   007F10  2206               	addwfc	(___aldiv@divisor+1)^0,f,c
   417   007F12  2207               	addwfc	(___aldiv@divisor+2)^0,f,c
   418   007F14  2208               	addwfc	(___aldiv@divisor+3)^0,f,c
   419   007F16  0E01               	movlw	1
   420   007F18  6E0A               	movwf	___aldiv@sign^0,c
   421   007F1A                     l799:
   422   007F1A  BE04               	btfsc	(___aldiv@dividend+3)^0,7,c
   423   007F1C  EF94  F03F         	goto	u80
   424   007F20  EF92  F03F         	goto	u81
   425   007F24                     u81:
   426   007F24  EF9E  F03F         	goto	l805
   427   007F28                     u80:
   428   007F28  1E04               	comf	(___aldiv@dividend+3)^0,f,c
   429   007F2A  1E03               	comf	(___aldiv@dividend+2)^0,f,c
   430   007F2C  1E02               	comf	(___aldiv@dividend+1)^0,f,c
   431   007F2E  6C01               	negf	___aldiv@dividend^0,c
   432   007F30  0E00               	movlw	0
   433   007F32  2202               	addwfc	(___aldiv@dividend+1)^0,f,c
   434   007F34  2203               	addwfc	(___aldiv@dividend+2)^0,f,c
   435   007F36  2204               	addwfc	(___aldiv@dividend+3)^0,f,c
   436   007F38  0E01               	movlw	1
   437   007F3A  1A0A               	xorwf	___aldiv@sign^0,f,c
   438   007F3C                     l805:
   439   007F3C  0E00               	movlw	0
   440   007F3E  6E0B               	movwf	___aldiv@quotient^0,c
   441   007F40  0E00               	movlw	0
   442   007F42  6E0C               	movwf	(___aldiv@quotient+1)^0,c
   443   007F44  0E00               	movlw	0
   444   007F46  6E0D               	movwf	(___aldiv@quotient+2)^0,c
   445   007F48  0E00               	movlw	0
   446   007F4A  6E0E               	movwf	(___aldiv@quotient+3)^0,c
   447   007F4C  5005               	movf	___aldiv@divisor^0,w,c
   448   007F4E  1006               	iorwf	(___aldiv@divisor+1)^0,w,c
   449   007F50  1007               	iorwf	(___aldiv@divisor+2)^0,w,c
   450   007F52  1008               	iorwf	(___aldiv@divisor+3)^0,w,c
   451   007F54  B4D8               	btfsc	status,2,c
   452   007F56  EFAF  F03F         	goto	u91
   453   007F5A  EFB1  F03F         	goto	u90
   454   007F5E                     u91:
   455   007F5E  EFE7  F03F         	goto	l827
   456   007F62                     u90:
   457   007F62  0E01               	movlw	1
   458   007F64  6E09               	movwf	___aldiv@counter^0,c
   459   007F66  EFBB  F03F         	goto	l813
   460   007F6A                     l811:
   461   007F6A  90D8               	bcf	status,0,c
   462   007F6C  3605               	rlcf	___aldiv@divisor^0,f,c
   463   007F6E  3606               	rlcf	(___aldiv@divisor+1)^0,f,c
   464   007F70  3607               	rlcf	(___aldiv@divisor+2)^0,f,c
   465   007F72  3608               	rlcf	(___aldiv@divisor+3)^0,f,c
   466   007F74  2A09               	incf	___aldiv@counter^0,f,c
   467   007F76                     l813:
   468   007F76  AE08               	btfss	(___aldiv@divisor+3)^0,7,c
   469   007F78  EFC0  F03F         	goto	u101
   470   007F7C  EFC2  F03F         	goto	u100
   471   007F80                     u101:
   472   007F80  EFB5  F03F         	goto	l811
   473   007F84                     u100:
   474   007F84                     l815:
   475   007F84  90D8               	bcf	status,0,c
   476   007F86  360B               	rlcf	___aldiv@quotient^0,f,c
   477   007F88  360C               	rlcf	(___aldiv@quotient+1)^0,f,c
   478   007F8A  360D               	rlcf	(___aldiv@quotient+2)^0,f,c
   479   007F8C  360E               	rlcf	(___aldiv@quotient+3)^0,f,c
   480   007F8E  5005               	movf	___aldiv@divisor^0,w,c
   481   007F90  5C01               	subwf	___aldiv@dividend^0,w,c
   482   007F92  5006               	movf	(___aldiv@divisor+1)^0,w,c
   483   007F94  5802               	subwfb	(___aldiv@dividend+1)^0,w,c
   484   007F96  5007               	movf	(___aldiv@divisor+2)^0,w,c
   485   007F98  5803               	subwfb	(___aldiv@dividend+2)^0,w,c
   486   007F9A  5008               	movf	(___aldiv@divisor+3)^0,w,c
   487   007F9C  5804               	subwfb	(___aldiv@dividend+3)^0,w,c
   488   007F9E  A0D8               	btfss	status,0,c
   489   007FA0  EFD4  F03F         	goto	u111
   490   007FA4  EFD6  F03F         	goto	u110
   491   007FA8                     u111:
   492   007FA8  EFDF  F03F         	goto	l823
   493   007FAC                     u110:
   494   007FAC  5005               	movf	___aldiv@divisor^0,w,c
   495   007FAE  5E01               	subwf	___aldiv@dividend^0,f,c
   496   007FB0  5006               	movf	(___aldiv@divisor+1)^0,w,c
   497   007FB2  5A02               	subwfb	(___aldiv@dividend+1)^0,f,c
   498   007FB4  5007               	movf	(___aldiv@divisor+2)^0,w,c
   499   007FB6  5A03               	subwfb	(___aldiv@dividend+2)^0,f,c
   500   007FB8  5008               	movf	(___aldiv@divisor+3)^0,w,c
   501   007FBA  5A04               	subwfb	(___aldiv@dividend+3)^0,f,c
   502   007FBC  800B               	bsf	___aldiv@quotient^0,0,c
   503   007FBE                     l823:
   504   007FBE  90D8               	bcf	status,0,c
   505   007FC0  3208               	rrcf	(___aldiv@divisor+3)^0,f,c
   506   007FC2  3207               	rrcf	(___aldiv@divisor+2)^0,f,c
   507   007FC4  3206               	rrcf	(___aldiv@divisor+1)^0,f,c
   508   007FC6  3205               	rrcf	___aldiv@divisor^0,f,c
   509   007FC8  2E09               	decfsz	___aldiv@counter^0,f,c
   510   007FCA  EFC2  F03F         	goto	l815
   511   007FCE                     l827:
   512   007FCE  500A               	movf	___aldiv@sign^0,w,c
   513   007FD0  B4D8               	btfsc	status,2,c
   514   007FD2  EFED  F03F         	goto	u121
   515   007FD6  EFEF  F03F         	goto	u120
   516   007FDA                     u121:
   517   007FDA  EFF7  F03F         	goto	l831
   518   007FDE                     u120:
   519   007FDE  1E0E               	comf	(___aldiv@quotient+3)^0,f,c
   520   007FE0  1E0D               	comf	(___aldiv@quotient+2)^0,f,c
   521   007FE2  1E0C               	comf	(___aldiv@quotient+1)^0,f,c
   522   007FE4  6C0B               	negf	___aldiv@quotient^0,c
   523   007FE6  0E00               	movlw	0
   524   007FE8  220C               	addwfc	(___aldiv@quotient+1)^0,f,c
   525   007FEA  220D               	addwfc	(___aldiv@quotient+2)^0,f,c
   526   007FEC  220E               	addwfc	(___aldiv@quotient+3)^0,f,c
   527   007FEE                     l831:
   528   007FEE  C00B  F001         	movff	___aldiv@quotient,?___aldiv
   529   007FF2  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
   530   007FF6  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
   531   007FFA  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
   532   007FFE  0012               	return		;funcret
   533   008000                     __end_of___aldiv:
   534                           	callstack 0
   535   000000                     
   536                           	psect	rparam
   537   000000                     
   538                           	psect	config
   539                           
   540                           ;Config register CONFIG1L @ 0x300000
   541                           ;	PLL Selection
   542                           ;	PLLSEL = PLL4X, 4x clock multiplier
   543                           ;	PLL Enable Configuration bit
   544                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
   545                           ;	CPU System Clock Postscaler
   546                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
   547                           ;	Low Speed USB mode with 48 MHz system clock
   548                           ;	LS48MHZ = SYS24X4, System clock at 24 MHz, USB clock divider is set to 4
   549   300000                     	org	3145728
   550   300000  00                 	db	0
   551                           
   552                           ;Config register CONFIG1H @ 0x300001
   553                           ;	Oscillator Selection
   554                           ;	FOSC = HSM, HS oscillator, medium power 4MHz to 16MHz
   555                           ;	Primary Oscillator Shutdown
   556                           ;	PCLKEN = OFF, Primary oscillator shutdown firmware controlled
   557                           ;	Fail-Safe Clock Monitor
   558                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   559                           ;	Internal/External Oscillator Switchover
   560                           ;	IESO = OFF, Oscillator Switchover mode disabled
   561   300001                     	org	3145729
   562   300001  03                 	db	3
   563                           
   564                           ;Config register CONFIG2L @ 0x300002
   565                           ;	Power-up Timer Enable
   566                           ;	nPWRTEN = ON, Power up timer enabled
   567                           ;	Brown-out Reset Enable
   568                           ;	BOREN = OFF, BOR disabled in hardware (SBOREN is ignored)
   569                           ;	Brown-out Reset Voltage
   570                           ;	BORV = 190, BOR set to 1.9V nominal
   571                           ;	Low-Power Brown-out Reset
   572                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
   573   300002                     	org	3145730
   574   300002  58                 	db	88
   575                           
   576                           ;Config register CONFIG2H @ 0x300003
   577                           ;	Watchdog Timer Enable bits
   578                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
   579                           ;	Watchdog Timer Postscaler
   580                           ;	WDTPS = 32768, 1:32768
   581   300003                     	org	3145731
   582   300003  3C                 	db	60
   583                           
   584                           ; Padding undefined space
   585   300004                     	org	3145732
   586   300004  FF                 	db	255
   587                           
   588                           ;Config register CONFIG3H @ 0x300005
   589                           ;	CCP2 MUX bit
   590                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
   591                           ;	PORTB A/D Enable bit
   592                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
   593                           ;	Timer3 Clock Input MUX bit
   594                           ;	T3CMX = RC0, T3CKI function is on RC0
   595                           ;	SDO Output MUX bit
   596                           ;	SDOMX = RB3, SDO function is on RB3
   597                           ;	Master Clear Reset Pin Enable
   598                           ;	MCLRE = ON, MCLR pin enabled; RE3 input disabled
   599   300005                     	org	3145733
   600   300005  D1                 	db	209
   601                           
   602                           ;Config register CONFIG4L @ 0x300006
   603                           ;	Stack Full/Underflow Reset
   604                           ;	STVREN = ON, Stack full/underflow will cause Reset
   605                           ;	Single-Supply ICSP Enable bit
   606                           ;	LVP = OFF, Single-Supply ICSP disabled
   607                           ;	Dedicated In-Circuit Debug/Programming Port Enable
   608                           ;	ICPRT = OFF, ICPORT disabled
   609                           ;	Extended Instruction Set Enable bit
   610                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
   611                           ;	Background Debugger Enable bit
   612                           ;	DEBUG = 0x1, unprogrammed default
   613   300006                     	org	3145734
   614   300006  81                 	db	129
   615                           
   616                           ; Padding undefined space
   617   300007                     	org	3145735
   618   300007  FF                 	db	255
   619                           
   620                           ;Config register CONFIG5L @ 0x300008
   621                           ;	Block 0 Code Protect
   622                           ;	CP0 = OFF, Block 0 is not code-protected
   623                           ;	Block 1 Code Protect
   624                           ;	CP1 = OFF, Block 1 is not code-protected
   625                           ;	Block 2 Code Protect
   626                           ;	CP2 = OFF, Block 2 is not code-protected
   627                           ;	Block 3 Code Protect
   628                           ;	CP3 = OFF, Block 3 is not code-protected
   629   300008                     	org	3145736
   630   300008  0F                 	db	15
   631                           
   632                           ;Config register CONFIG5H @ 0x300009
   633                           ;	Boot Block Code Protect
   634                           ;	CPB = OFF, Boot block is not code-protected
   635                           ;	Data EEPROM Code Protect
   636                           ;	CPD = OFF, Data EEPROM is not code-protected
   637   300009                     	org	3145737
   638   300009  C0                 	db	192
   639                           
   640                           ;Config register CONFIG6L @ 0x30000A
   641                           ;	Block 0 Write Protect
   642                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
   643                           ;	Block 1 Write Protect
   644                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
   645                           ;	Block 2 Write Protect
   646                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
   647                           ;	Block 3 Write Protect
   648                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
   649   30000A                     	org	3145738
   650   30000A  0F                 	db	15
   651                           
   652                           ;Config register CONFIG6H @ 0x30000B
   653                           ;	Configuration Registers Write Protect
   654                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   655                           ;	Boot Block Write Protect
   656                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
   657                           ;	Data EEPROM Write Protect
   658                           ;	WRTD = OFF, Data EEPROM is not write-protected
   659   30000B                     	org	3145739
   660   30000B  E0                 	db	224
   661                           
   662                           ;Config register CONFIG7L @ 0x30000C
   663                           ;	Block 0 Table Read Protect
   664                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
   665                           ;	Block 1 Table Read Protect
   666                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
   667                           ;	Block 2 Table Read Protect
   668                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
   669                           ;	Block 3 Table Read Protect
   670                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
   671   30000C                     	org	3145740
   672   30000C  0F                 	db	15
   673                           
   674                           ;Config register CONFIG7H @ 0x30000D
   675                           ;	Boot Block Table Read Protect
   676                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
   677   30000D                     	org	3145741
   678   30000D  40                 	db	64
   679                           tosu	equ	0xFFF
   680                           tosh	equ	0xFFE
   681                           tosl	equ	0xFFD
   682                           stkptr	equ	0xFFC
   683                           pclatu	equ	0xFFB
   684                           pclath	equ	0xFFA
   685                           pcl	equ	0xFF9
   686                           tblptru	equ	0xFF8
   687                           tblptrh	equ	0xFF7
   688                           tblptrl	equ	0xFF6
   689                           tablat	equ	0xFF5
   690                           prodh	equ	0xFF4
   691                           prodl	equ	0xFF3
   692                           indf0	equ	0xFEF
   693                           postinc0	equ	0xFEE
   694                           postdec0	equ	0xFED
   695                           preinc0	equ	0xFEC
   696                           plusw0	equ	0xFEB
   697                           fsr0h	equ	0xFEA
   698                           fsr0l	equ	0xFE9
   699                           wreg	equ	0xFE8
   700                           indf1	equ	0xFE7
   701                           postinc1	equ	0xFE6
   702                           postdec1	equ	0xFE5
   703                           preinc1	equ	0xFE4
   704                           plusw1	equ	0xFE3
   705                           fsr1h	equ	0xFE2
   706                           fsr1l	equ	0xFE1
   707                           bsr	equ	0xFE0
   708                           indf2	equ	0xFDF
   709                           postinc2	equ	0xFDE
   710                           postdec2	equ	0xFDD
   711                           preinc2	equ	0xFDC
   712                           plusw2	equ	0xFDB
   713                           fsr2h	equ	0xFDA
   714                           fsr2l	equ	0xFD9
   715                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     24      24
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_USART_Init
    _USART_Init->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     740
                                             22 COMRAM     2     2      0
                         _USART_Init
                           _USART_Tx
 ---------------------------------------------------------------------------------
 (1) _USART_Tx                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           8     4      4     725
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_Init
     ___aldiv
   _USART_Tx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     18      18       1       25.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBIGSFRhhh        50      0       0      20        0.0%
BITBIGSFRhhll       16      0       0      21        0.0%
BITBIGSFRhl         36      0       0      22        0.0%
BITBIGSFRl           A      0       0      23        0.0%
ABS                  0      0       0      24        0.0%
BIGRAM             7FF      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat Jul 15 15:31:04 2023

                     l20 7E28                       l17 7EF2                       u70 7F06  
                     u71 7F02                       u80 7F28                       u81 7F24  
                     u90 7F62                       u91 7F5E                      l119 7FFE  
                    l801 7F28                      l811 7F6A                      l803 7F38  
                    l821 7FBC                      l813 7F76                      l805 7F3C  
                    l831 7FEE                      l823 7FBE                      l815 7F84  
                    l807 7F4C                      l825 7FC8                      l817 7F8E  
                    l809 7F62                      l841 7EE6                      l819 7FAC  
                    l827 7FCE                      l851 7EF0                      l843 7EE8  
                    l835 7E7E                      l829 7FDE                      l845 7EEA  
                    l837 7E88                      l861 7E60                      l853 7E2A  
                    l791 7EF4                      l847 7EEC                      l839 7EE4  
                    l775 7E24                      l855 7E3E                      l793 7EF8  
                    l849 7EEE                      l857 7E44                      l795 7F06  
                    l859 7E5A                      l797 7F16                      l799 7F1A  
                    u100 7F84                      u101 7F80                      u110 7FAC  
                    u111 7FA8                      u120 7FDE                      u121 7FDA  
                    u137 7E4E                      u147 7E6A                      wreg 0FE8  
                   _main 7E2A                     start 0000             ___param_bank 0000  
        __end_of___aldiv 8000                    ?_main 0001                    _RCREG 0FAE  
                  _SPBRG 0FAF                    _TXREG 0FAD         __end_of_USART_Tx 7E2A  
           USART_Tx@data 0001                    status 0FD8              ?_USART_Init 000F  
        __initialization 7E1C             __end_of_main 7E7E                   ??_main 0017  
          __activetblptr 0000                ??___aldiv 0009                   isa$std 0001  
             __accesstop 0060  __end_of__initialization 7E1C            ___rparam_used 0001  
         __pcstackCOMRAM 0001                ?_USART_Tx 0001               ??_USART_Tx 0001  
           ??_USART_Init 0013                  __Hparam 0000                  __Lparam 0000  
                ___aldiv 7EF4           USART_Init@BAUD 000F                  __pcinit 7E1C  
                __ramtop 0800                  __ptext0 7E2A                  __ptext1 7E22  
                __ptext2 7E7E                  __ptext3 7EF4         ___aldiv@dividend 0001  
     __end_of_USART_Init 7EF4     end_of_initialization 7E1C                _RCSTAbits 0FAB  
       ___aldiv@quotient 000B                _TRISCbits 0F94                _TXSTAbits 0FAC  
    start_initialization 7E1C                 ?___aldiv 0001          ___aldiv@divisor 0005  
        ___aldiv@counter 0009                 _USART_Tx 7E22                 __Hrparam 0000  
               __Lrparam 0000               _ANSELCbits 0F5D                 isa$xinst 0000  
         _USART_Init$873 0013             ___aldiv@sign 000A               _USART_Init 7E7E  
