

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Thu Jun 22 18:48:49 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    30   000000                     
    31                           ; Generated 22/03/2023 GMT
    32                           ; 
    33                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution. Publication is not required when
    47                           ;        this file is used in an embedded application.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F45K50 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65   000000                     
    66                           	psect	idataCOMRAM
    67   000D2C                     __pidataCOMRAM:
    68                           	callstack 0
    69                           
    70                           ;initializer for _carga
    71   000D2C  8954               	dw	35156
    72   000D2E  0000               	dw	0
    73   000000                     _LATAbits	set	3977
    74   000000                     _ANSELA	set	3931
    75   000000                     _ANSELC	set	3933
    76   000000                     _PORTCbits	set	3970
    77   000000                     _LATA	set	3977
    78   000000                     _LATC	set	3979
    79   000000                     _LATDbits	set	3980
    80   000000                     _TRISA	set	3986
    81   000000                     _TRISC	set	3988
    82   000000                     _TRISDbits	set	3989
    83   000000                     _T0CONbits	set	4053
    84   000000                     _INTCONbits	set	4082
    85   000000                     _TMR0H	set	4055
    86   000000                     _TMR0L	set	4054
    87                           
    88                           	psect	smallconst
    89   000800                     __psmallconst:
    90                           	callstack 0
    91   000800  00                 	db	0
    92   000801                     STR_3:
    93   000801  54                 	db	84	;'T'
    94   000802  65                 	db	101	;'e'
    95   000803  72                 	db	114	;'r'
    96   000804  6D                 	db	109	;'m'
    97   000805  69                 	db	105	;'i'
    98   000806  6E                 	db	110	;'n'
    99   000807  61                 	db	97	;'a'
   100   000808  64                 	db	100	;'d'
   101   000809  6F                 	db	111	;'o'
   102   00080A  00                 	db	0
   103   00080B                     STR_2:
   104   00080B  33                 	db	51	;'3'
   105   00080C  20                 	db	32
   106   00080D  73                 	db	115	;'s'
   107   00080E  65                 	db	101	;'e'
   108   00080F  67                 	db	103	;'g'
   109   000810  75                 	db	117	;'u'
   110   000811  6E                 	db	110	;'n'
   111   000812  64                 	db	100	;'d'
   112   000813  6F                 	db	111	;'o'
   113   000814  00                 	db	0
   114   000815                     STR_1:
   115   000815  54                 	db	84	;'T'
   116   000816  49                 	db	73	;'I'
   117   000817  45                 	db	69	;'E'
   118   000818  4D                 	db	77	;'M'
   119   000819  50                 	db	80	;'P'
   120   00081A  4F                 	db	79	;'O'
   121   00081B  00                 	db	0
   122   00081C  00                 	db	0	; dummy byte at the end
   123   000000                     
   124                           ; #config settings
   125                           
   126                           	psect	cinit
   127   000C7C                     __pcinit:
   128                           	callstack 0
   129   000C7C                     start_initialization:
   130                           	callstack 0
   131   000C7C                     __initialization:
   132                           	callstack 0
   133                           
   134                           ; Initialize objects allocated to COMRAM (4 bytes)
   135                           ; load TBLPTR registers with __pidataCOMRAM
   136   000C7C  0E2C               	movlw	low __pidataCOMRAM
   137   000C7E  6EF6               	movwf	tblptrl,c
   138   000C80  0E0D               	movlw	high __pidataCOMRAM
   139   000C82  6EF7               	movwf	tblptrh,c
   140   000C84  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   141   000C86  6EF8               	movwf	tblptru,c
   142   000C88  EE00  F01A         	lfsr	0,__pdataCOMRAM
   143   000C8C  EE10 F004          	lfsr	1,4
   144   000C90                     copy_data0:
   145   000C90  0009               	tblrd		*+
   146   000C92  CFF5 FFEE          	movff	tablat,postinc0
   147   000C96  50E5               	movf	postdec1,w,c
   148   000C98  50E1               	movf	fsr1l,w,c
   149   000C9A  E1FA               	bnz	copy_data0
   150   000C9C                     end_of_initialization:
   151                           	callstack 0
   152   000C9C                     __end_of__initialization:
   153                           	callstack 0
   154   000C9C  901E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   155   000C9E  921E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   156   000CA0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   157   000CA2  6EF8               	movwf	tblptru,c
   158   000CA4  0100               	movlb	0
   159   000CA6  EF22  F005         	goto	_main	;jump to C main() function
   160                           
   161                           	psect	dataCOMRAM
   162   00001A                     __pdataCOMRAM:
   163                           	callstack 0
   164   00001A                     _carga:
   165                           	callstack 0
   166   00001A                     	ds	4
   167                           
   168                           	psect	cstackCOMRAM
   169   000001                     __pcstackCOMRAM:
   170                           	callstack 0
   171   000001                     i2Lcd_Port@a:
   172                           	callstack 0
   173                           
   174                           ; 1 bytes @ 0x0
   175   000001                     	ds	1
   176   000002                     ??i2_Lcd_Cmd:
   177   000002                     i2Lcd_Write_Char@temp:
   178                           	callstack 0
   179                           
   180                           ; 1 bytes @ 0x1
   181   000002                     	ds	1
   182   000003                     i2Lcd_Cmd@a:
   183                           	callstack 0
   184   000003                     i2Lcd_Write_Char@y:
   185                           	callstack 0
   186                           
   187                           ; 1 bytes @ 0x2
   188   000003                     	ds	1
   189   000004                     i2Lcd_Set_Cursor@b:
   190                           	callstack 0
   191   000004                     i2Lcd_Write_Char@a:
   192                           	callstack 0
   193                           
   194                           ; 1 bytes @ 0x3
   195   000004                     	ds	1
   196   000005                     i2Lcd_Set_Cursor@a:
   197                           	callstack 0
   198   000005                     i2Lcd_Write_String@a:
   199                           	callstack 0
   200                           
   201                           ; 2 bytes @ 0x4
   202   000005                     	ds	1
   203   000006                     i2Lcd_Set_Cursor@z:
   204                           	callstack 0
   205                           
   206                           ; 1 bytes @ 0x5
   207   000006                     	ds	1
   208   000007                     ??i2_Lcd_Write_String:
   209   000007                     i2Lcd_Set_Cursor@y:
   210                           	callstack 0
   211                           
   212                           ; 1 bytes @ 0x6
   213   000007                     	ds	1
   214   000008                     i2Lcd_Set_Cursor@temp:
   215                           	callstack 0
   216                           
   217                           ; 1 bytes @ 0x7
   218   000008                     	ds	1
   219   000009                     i2Lcd_Write_String@i:
   220                           	callstack 0
   221                           
   222                           ; 2 bytes @ 0x8
   223   000009                     	ds	2
   224   00000B                     ??_ISR_timer0:
   225                           
   226                           ; 1 bytes @ 0xA
   227   00000B                     	ds	4
   228   00000F                     Lcd_Port@a:
   229                           	callstack 0
   230                           
   231                           ; 1 bytes @ 0xE
   232   00000F                     	ds	1
   233   000010                     ??_Lcd_Cmd:
   234   000010                     Lcd_Write_Char@temp:
   235                           	callstack 0
   236                           
   237                           ; 1 bytes @ 0xF
   238   000010                     	ds	1
   239   000011                     Lcd_Cmd@a:
   240                           	callstack 0
   241   000011                     Lcd_Write_Char@y:
   242                           	callstack 0
   243                           
   244                           ; 1 bytes @ 0x10
   245   000011                     	ds	1
   246   000012                     ??_Lcd_Init:
   247   000012                     Lcd_Set_Cursor@b:
   248                           	callstack 0
   249   000012                     Lcd_Write_Char@a:
   250                           	callstack 0
   251                           
   252                           ; 1 bytes @ 0x11
   253   000012                     	ds	1
   254   000013                     Lcd_Set_Cursor@a:
   255                           	callstack 0
   256   000013                     Lcd_Write_String@a:
   257                           	callstack 0
   258                           
   259                           ; 2 bytes @ 0x12
   260   000013                     	ds	1
   261   000014                     Lcd_Set_Cursor@z:
   262                           	callstack 0
   263                           
   264                           ; 1 bytes @ 0x13
   265   000014                     	ds	1
   266   000015                     ??_Lcd_Write_String:
   267   000015                     Lcd_Set_Cursor@y:
   268                           	callstack 0
   269                           
   270                           ; 1 bytes @ 0x14
   271   000015                     	ds	1
   272   000016                     Lcd_Set_Cursor@temp:
   273                           	callstack 0
   274                           
   275                           ; 1 bytes @ 0x15
   276   000016                     	ds	1
   277   000017                     Lcd_Write_String@i:
   278                           	callstack 0
   279                           
   280                           ; 2 bytes @ 0x16
   281   000017                     	ds	2
   282   000019                     ??_main:
   283                           
   284                           ; 1 bytes @ 0x18
   285   000019                     	ds	1
   286                           
   287 ;;
   288 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   289 ;;
   290 ;; *************** function _main *****************
   291 ;; Defined at:
   292 ;;		line 43 in file "condigoprincipal.c"
   293 ;; Parameters:    Size  Location     Type
   294 ;;		None
   295 ;; Auto vars:     Size  Location     Type
   296 ;;		None
   297 ;; Return value:  Size  Location     Type
   298 ;;                  1    wreg      void 
   299 ;; Registers used:
   300 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   301 ;; Tracked objects:
   302 ;;		On entry : 0/0
   303 ;;		On exit  : 0/0
   304 ;;		Unchanged: 0/0
   305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   306 ;;      Params:         0       0       0       0       0       0       0       0       0
   307 ;;      Locals:         0       0       0       0       0       0       0       0       0
   308 ;;      Temps:          1       0       0       0       0       0       0       0       0
   309 ;;      Totals:         1       0       0       0       0       0       0       0       0
   310 ;;Total ram usage:        1 bytes
   311 ;; Hardware stack levels required when called: 8
   312 ;; This function calls:
   313 ;;		_InitPort
   314 ;;		_Lcd_Clear
   315 ;;		_Lcd_Init
   316 ;;		_Lcd_Set_Cursor
   317 ;;		_Lcd_Write_String
   318 ;;		_Timer0
   319 ;; This function is called by:
   320 ;;		Startup code after reset
   321 ;; This function uses a non-reentrant model
   322 ;;
   323                           
   324                           	psect	text0
   325   000A44                     __ptext0:
   326                           	callstack 0
   327   000A44                     _main:
   328                           	callstack 23
   329   000A44                     
   330                           ;condigoprincipal.c: 44:     Lcd_Init();
   331   000A44  ECE1  F004         	call	_Lcd_Init	;wreg free
   332                           
   333                           ;condigoprincipal.c: 45:     InitPort();
   334   000A48  EC75  F006         	call	_InitPort	;wreg free
   335                           
   336                           ;condigoprincipal.c: 46:     Timer0();
   337   000A4C  EC83  F006         	call	_Timer0	;wreg free
   338                           
   339                           ;condigoprincipal.c: 47:     Lcd_Clear();
   340   000A50  EC8F  F006         	call	_Lcd_Clear	;wreg free
   341   000A54                     
   342                           ;condigoprincipal.c: 48:     Lcd_Set_Cursor(1,1);
   343   000A54  0E01               	movlw	1
   344   000A56  6E12               	movwf	Lcd_Set_Cursor@b^0,c
   345   000A58  0E01               	movlw	1
   346   000A5A  EC0F  F004         	call	_Lcd_Set_Cursor
   347   000A5E                     
   348                           ;condigoprincipal.c: 49:     Lcd_Write_String("TIEMPO");
   349   000A5E  0E15               	movlw	low STR_1
   350   000A60  6E13               	movwf	Lcd_Write_String@a^0,c
   351   000A62  0E08               	movlw	high STR_1
   352   000A64  6E14               	movwf	(Lcd_Write_String@a+1)^0,c
   353   000A66  ECB4  F005         	call	_Lcd_Write_String	;wreg free
   354   000A6A                     l1329:
   355                           
   356                           ;condigoprincipal.c: 51:         if(PORTCbits.RC0 == 1){
   357   000A6A  A082               	btfss	130,0,c	;volatile
   358   000A6C  EF3A  F005         	goto	u431
   359   000A70  EF3C  F005         	goto	u430
   360   000A74                     u431:
   361   000A74  EF35  F005         	goto	l1329
   362   000A78                     u430:
   363   000A78                     
   364                           ;condigoprincipal.c: 52:             _delay((unsigned long)((50)*(12000000/4000.0)));
   365   000A78  0EC3               	movlw	195
   366   000A7A  6E19               	movwf	??_main^0,c
   367   000A7C  0ECD               	movlw	205
   368   000A7E                     u457:
   369   000A7E  2EE8               	decfsz	wreg,f,c
   370   000A80  D7FE               	bra	u457
   371   000A82  2E19               	decfsz	??_main^0,f,c
   372   000A84  D7FC               	bra	u457
   373   000A86  F000               	nop	
   374   000A88                     
   375                           ;condigoprincipal.c: 53:             TMR0L = carga;
   376   000A88  0E54               	movlw	84
   377   000A8A  6ED6               	movwf	214,c	;volatile
   378   000A8C                     
   379                           ;condigoprincipal.c: 54:             TMR0H = (carga) >> 8;
   380   000A8C  0E89               	movlw	137
   381   000A8E  6ED7               	movwf	215,c	;volatile
   382   000A90                     
   383                           ;condigoprincipal.c: 55:             Lcd_Set_Cursor(2,5);
   384   000A90  0E05               	movlw	5
   385   000A92  6E12               	movwf	Lcd_Set_Cursor@b^0,c
   386   000A94  0E02               	movlw	2
   387   000A96  EC0F  F004         	call	_Lcd_Set_Cursor
   388   000A9A                     
   389                           ;condigoprincipal.c: 56:             Lcd_Write_String("3 segundo");
   390   000A9A  0E0B               	movlw	low STR_2
   391   000A9C  6E13               	movwf	Lcd_Write_String@a^0,c
   392   000A9E  0E08               	movlw	high STR_2
   393   000AA0  6E14               	movwf	(Lcd_Write_String@a+1)^0,c
   394   000AA2  ECB4  F005         	call	_Lcd_Write_String	;wreg free
   395   000AA6                     
   396                           ;condigoprincipal.c: 57:             LATAbits.LA0 = 1;
   397   000AA6  8089               	bsf	137,0,c	;volatile
   398   000AA8  EF35  F005         	goto	l1329
   399   000AAC  EF2B  F000         	goto	start
   400   000AB0                     __end_of_main:
   401                           	callstack 0
   402                           
   403 ;; *************** function _Timer0 *****************
   404 ;; Defined at:
   405 ;;		line 27 in file "condigoprincipal.c"
   406 ;; Parameters:    Size  Location     Type
   407 ;;		None
   408 ;; Auto vars:     Size  Location     Type
   409 ;;		None
   410 ;; Return value:  Size  Location     Type
   411 ;;                  1    wreg      void 
   412 ;; Registers used:
   413 ;;		wreg, status,2
   414 ;; Tracked objects:
   415 ;;		On entry : 0/0
   416 ;;		On exit  : 0/0
   417 ;;		Unchanged: 0/0
   418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   419 ;;      Params:         0       0       0       0       0       0       0       0       0
   420 ;;      Locals:         0       0       0       0       0       0       0       0       0
   421 ;;      Temps:          0       0       0       0       0       0       0       0       0
   422 ;;      Totals:         0       0       0       0       0       0       0       0       0
   423 ;;Total ram usage:        0 bytes
   424 ;; Hardware stack levels used: 1
   425 ;; Hardware stack levels required when called: 4
   426 ;; This function calls:
   427 ;;		Nothing
   428 ;; This function is called by:
   429 ;;		_main
   430 ;; This function uses a non-reentrant model
   431 ;;
   432                           
   433                           	psect	text1
   434   000D06                     __ptext1:
   435                           	callstack 0
   436   000D06                     _Timer0:
   437                           	callstack 26
   438   000D06                     
   439                           ;condigoprincipal.c: 28:     INTCONbits.GIE = 0;
   440   000D06  9EF2               	bcf	242,7,c	;volatile
   441                           
   442                           ;condigoprincipal.c: 29:     INTCONbits.TMR0IF = 0;
   443   000D08  94F2               	bcf	242,2,c	;volatile
   444                           
   445                           ;condigoprincipal.c: 30:     INTCONbits.TMR0IE = 1;
   446   000D0A  8AF2               	bsf	242,5,c	;volatile
   447                           
   448                           ;condigoprincipal.c: 31:     INTCONbits.PEIE = 1;
   449   000D0C  8CF2               	bsf	242,6,c	;volatile
   450                           
   451                           ;condigoprincipal.c: 32:     INTCONbits.GIE = 1;
   452   000D0E  8EF2               	bsf	242,7,c	;volatile
   453                           
   454                           ;condigoprincipal.c: 33:     T0CONbits.T0CS = 0;
   455   000D10  9AD5               	bcf	213,5,c	;volatile
   456                           
   457                           ;condigoprincipal.c: 34:     T0CONbits.PSA = 0;
   458   000D12  96D5               	bcf	213,3,c	;volatile
   459   000D14                     
   460                           ;condigoprincipal.c: 35:     T0CONbits.T0PS = 0b111;
   461   000D14  0E07               	movlw	7
   462   000D16  12D5               	iorwf	213,f,c	;volatile
   463   000D18                     
   464                           ;condigoprincipal.c: 36:     T0CONbits.T08BIT = 0;
   465   000D18  9CD5               	bcf	213,6,c	;volatile
   466   000D1A                     
   467                           ;condigoprincipal.c: 37:     T0CONbits.TMR0ON = 1;
   468   000D1A  8ED5               	bsf	213,7,c	;volatile
   469   000D1C  0012               	return		;funcret
   470   000D1E                     __end_of_Timer0:
   471                           	callstack 0
   472                           
   473 ;; *************** function _Lcd_Write_String *****************
   474 ;; Defined at:
   475 ;;		line 104 in file "lcd.c"
   476 ;; Parameters:    Size  Location     Type
   477 ;;  a               2   18[COMRAM] PTR const unsigned char 
   478 ;;		 -> STR_3(10), STR_2(10), STR_1(7), 
   479 ;; Auto vars:     Size  Location     Type
   480 ;;  i               2   22[COMRAM] int 
   481 ;; Return value:  Size  Location     Type
   482 ;;                  1    wreg      void 
   483 ;; Registers used:
   484 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   485 ;; Tracked objects:
   486 ;;		On entry : 0/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   490 ;;      Params:         2       0       0       0       0       0       0       0       0
   491 ;;      Locals:         2       0       0       0       0       0       0       0       0
   492 ;;      Temps:          2       0       0       0       0       0       0       0       0
   493 ;;      Totals:         6       0       0       0       0       0       0       0       0
   494 ;;Total ram usage:        6 bytes
   495 ;; Hardware stack levels used: 1
   496 ;; Hardware stack levels required when called: 6
   497 ;; This function calls:
   498 ;;		_Lcd_Write_Char
   499 ;; This function is called by:
   500 ;;		_main
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504                           	psect	text2
   505   000B68                     __ptext2:
   506                           	callstack 0
   507   000B68                     _Lcd_Write_String:
   508                           	callstack 24
   509   000B68                     
   510                           ;lcd.c: 104: void Lcd_Write_String(const char *a);lcd.c: 105: {;lcd.c: 106:     int i;;l
      +                          cd.c: 107:     for(i=0;a[i]!='\0';i++)
   511   000B68  0E00               	movlw	0
   512   000B6A  6E18               	movwf	(Lcd_Write_String@i+1)^0,c
   513   000B6C  0E00               	movlw	0
   514   000B6E  6E17               	movwf	Lcd_Write_String@i^0,c
   515   000B70  EFCA  F005         	goto	l1281
   516   000B74                     l1277:
   517                           
   518                           ;lcd.c: 108:         Lcd_Write_Char(a[i]);
   519   000B74  5017               	movf	Lcd_Write_String@i^0,w,c
   520   000B76  2413               	addwf	Lcd_Write_String@a^0,w,c
   521   000B78  6E15               	movwf	??_Lcd_Write_String^0,c
   522   000B7A  5018               	movf	(Lcd_Write_String@i+1)^0,w,c
   523   000B7C  2014               	addwfc	(Lcd_Write_String@a+1)^0,w,c
   524   000B7E  6E16               	movwf	(??_Lcd_Write_String+1)^0,c
   525   000B80  C015  FFF6         	movff	??_Lcd_Write_String,tblptrl
   526   000B84  C016  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   527   000B88                     	if	0	;tblptru may be non-zero
   528   000B88                     	endif
   529   000B88                     	if	0	;tblptru may be non-zero
   530   000B88                     	endif
   531   000B88  0008               	tblrd		*
   532   000B8A  50F5               	movf	tablat,w,c
   533   000B8C  EC0A  F006         	call	_Lcd_Write_Char
   534   000B90  4A17               	infsnz	Lcd_Write_String@i^0,f,c
   535   000B92  2A18               	incf	(Lcd_Write_String@i+1)^0,f,c
   536   000B94                     l1281:
   537   000B94  5017               	movf	Lcd_Write_String@i^0,w,c
   538   000B96  2413               	addwf	Lcd_Write_String@a^0,w,c
   539   000B98  6E15               	movwf	??_Lcd_Write_String^0,c
   540   000B9A  5018               	movf	(Lcd_Write_String@i+1)^0,w,c
   541   000B9C  2014               	addwfc	(Lcd_Write_String@a+1)^0,w,c
   542   000B9E  6E16               	movwf	(??_Lcd_Write_String+1)^0,c
   543   000BA0  C015  FFF6         	movff	??_Lcd_Write_String,tblptrl
   544   000BA4  C016  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
   545   000BA8                     	if	0	;tblptru may be non-zero
   546   000BA8                     	endif
   547   000BA8                     	if	0	;tblptru may be non-zero
   548   000BA8                     	endif
   549   000BA8  0008               	tblrd		*
   550   000BAA  50F5               	movf	tablat,w,c
   551   000BAC  0900               	iorlw	0
   552   000BAE  A4D8               	btfss	status,2,c
   553   000BB0  EFDC  F005         	goto	u371
   554   000BB4  EFDE  F005         	goto	u370
   555   000BB8                     u371:
   556   000BB8  EFBA  F005         	goto	l1277
   557   000BBC                     u370:
   558   000BBC  0012               	return		;funcret
   559   000BBE                     __end_of_Lcd_Write_String:
   560                           	callstack 0
   561                           
   562 ;; *************** function _Lcd_Write_Char *****************
   563 ;; Defined at:
   564 ;;		line 88 in file "lcd.c"
   565 ;; Parameters:    Size  Location     Type
   566 ;;  a               1    wreg     unsigned char 
   567 ;; Auto vars:     Size  Location     Type
   568 ;;  a               1   17[COMRAM] unsigned char 
   569 ;;  y               1   16[COMRAM] unsigned char 
   570 ;;  temp            1   15[COMRAM] unsigned char 
   571 ;; Return value:  Size  Location     Type
   572 ;;                  1    wreg      void 
   573 ;; Registers used:
   574 ;;		wreg, status,2, status,0, cstack
   575 ;; Tracked objects:
   576 ;;		On entry : 0/0
   577 ;;		On exit  : 0/0
   578 ;;		Unchanged: 0/0
   579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   580 ;;      Params:         0       0       0       0       0       0       0       0       0
   581 ;;      Locals:         3       0       0       0       0       0       0       0       0
   582 ;;      Temps:          0       0       0       0       0       0       0       0       0
   583 ;;      Totals:         3       0       0       0       0       0       0       0       0
   584 ;;Total ram usage:        3 bytes
   585 ;; Hardware stack levels used: 1
   586 ;; Hardware stack levels required when called: 5
   587 ;; This function calls:
   588 ;;		_Lcd_Port
   589 ;; This function is called by:
   590 ;;		_Lcd_Write_String
   591 ;;		_Lcd_CGRAM_CreateChar
   592 ;; This function uses a non-reentrant model
   593 ;;
   594                           
   595                           	psect	text3
   596   000C14                     __ptext3:
   597                           	callstack 0
   598   000C14                     _Lcd_Write_Char:
   599                           	callstack 24
   600                           
   601                           ;incstack = 0
   602                           ;Lcd_Write_Char@a stored from wreg
   603   000C14  6E12               	movwf	Lcd_Write_Char@a^0,c
   604   000C16                     
   605                           ;lcd.c: 88: void Lcd_Write_Char(char a);lcd.c: 89: {;lcd.c: 90:     char temp,y;;lcd.c: 
      +                          91:     temp = a&0x0F;
   606   000C16  5012               	movf	Lcd_Write_Char@a^0,w,c
   607   000C18  0B0F               	andlw	15
   608   000C1A  6E10               	movwf	Lcd_Write_Char@temp^0,c
   609                           
   610                           ;lcd.c: 92:     y = a&0xF0;
   611   000C1C  5012               	movf	Lcd_Write_Char@a^0,w,c
   612   000C1E  0BF0               	andlw	240
   613   000C20  6E11               	movwf	Lcd_Write_Char@y^0,c
   614   000C22                     
   615                           ;lcd.c: 93:     LATDbits.LD2 = 1;
   616   000C22  848C               	bsf	140,2,c	;volatile
   617   000C24                     
   618                           ;lcd.c: 94:     Lcd_Port(y>>4);
   619   000C24  3811               	swapf	Lcd_Write_Char@y^0,w,c
   620   000C26  0B0F               	andlw	15
   621   000C28  EC58  F005         	call	_Lcd_Port
   622   000C2C                     
   623                           ;lcd.c: 95:     LATDbits.LD3 = 1;
   624   000C2C  868C               	bsf	140,3,c	;volatile
   625   000C2E                     
   626                           ;lcd.c: 96:     _delay((unsigned long)((40)*(12000000/4000000.0)));
   627   000C2E  0E28               	movlw	40
   628   000C30                     u467:
   629   000C30  2EE8               	decfsz	wreg,f,c
   630   000C32  D7FE               	bra	u467
   631   000C34                     
   632                           ;lcd.c: 97:     LATDbits.LD3 = 0;
   633   000C34  968C               	bcf	140,3,c	;volatile
   634   000C36                     
   635                           ;lcd.c: 98:     Lcd_Port(temp);
   636   000C36  5010               	movf	Lcd_Write_Char@temp^0,w,c
   637   000C38  EC58  F005         	call	_Lcd_Port
   638   000C3C                     
   639                           ;lcd.c: 99:     LATDbits.LD3 = 1;
   640   000C3C  868C               	bsf	140,3,c	;volatile
   641   000C3E                     
   642                           ;lcd.c: 100:     _delay((unsigned long)((40)*(12000000/4000000.0)));
   643   000C3E  0E28               	movlw	40
   644   000C40                     u477:
   645   000C40  2EE8               	decfsz	wreg,f,c
   646   000C42  D7FE               	bra	u477
   647   000C44                     
   648                           ;lcd.c: 101:     LATDbits.LD3 = 0;
   649   000C44  968C               	bcf	140,3,c	;volatile
   650   000C46  0012               	return		;funcret
   651   000C48                     __end_of_Lcd_Write_Char:
   652                           	callstack 0
   653                           
   654 ;; *************** function _Lcd_Set_Cursor *****************
   655 ;; Defined at:
   656 ;;		line 26 in file "lcd.c"
   657 ;; Parameters:    Size  Location     Type
   658 ;;  a               1    wreg     unsigned char 
   659 ;;  b               1   17[COMRAM] unsigned char 
   660 ;; Auto vars:     Size  Location     Type
   661 ;;  a               1   18[COMRAM] unsigned char 
   662 ;;  temp            1   21[COMRAM] unsigned char 
   663 ;;  y               1   20[COMRAM] unsigned char 
   664 ;;  z               1   19[COMRAM] unsigned char 
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      void 
   667 ;; Registers used:
   668 ;;		wreg, status,2, status,0, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   674 ;;      Params:         1       0       0       0       0       0       0       0       0
   675 ;;      Locals:         4       0       0       0       0       0       0       0       0
   676 ;;      Temps:          0       0       0       0       0       0       0       0       0
   677 ;;      Totals:         5       0       0       0       0       0       0       0       0
   678 ;;Total ram usage:        5 bytes
   679 ;; Hardware stack levels used: 1
   680 ;; Hardware stack levels required when called: 6
   681 ;; This function calls:
   682 ;;		_Lcd_Cmd
   683 ;; This function is called by:
   684 ;;		_main
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           	psect	text4
   689   00081E                     __ptext4:
   690                           	callstack 0
   691   00081E                     _Lcd_Set_Cursor:
   692                           	callstack 24
   693                           
   694                           ;incstack = 0
   695                           ;Lcd_Set_Cursor@a stored from wreg
   696   00081E  6E13               	movwf	Lcd_Set_Cursor@a^0,c
   697   000820                     
   698                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
   699   000820  0413               	decf	Lcd_Set_Cursor@a^0,w,c
   700   000822  A4D8               	btfss	status,2,c
   701   000824  EF16  F004         	goto	u331
   702   000828  EF18  F004         	goto	u330
   703   00082C                     u331:
   704   00082C  EF29  F004         	goto	l1251
   705   000830                     u330:
   706   000830                     
   707                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
   708   000830  5012               	movf	Lcd_Set_Cursor@b^0,w,c
   709   000832  0F7F               	addlw	127
   710   000834  6E16               	movwf	Lcd_Set_Cursor@temp^0,c
   711                           
   712                           ;lcd.c: 32:         z = temp>>4;
   713   000836  3816               	swapf	Lcd_Set_Cursor@temp^0,w,c
   714   000838  0B0F               	andlw	15
   715   00083A  6E14               	movwf	Lcd_Set_Cursor@z^0,c
   716                           
   717                           ;lcd.c: 33:         y = temp & 0x0F;
   718   00083C  5016               	movf	Lcd_Set_Cursor@temp^0,w,c
   719   00083E  0B0F               	andlw	15
   720   000840  6E15               	movwf	Lcd_Set_Cursor@y^0,c
   721   000842                     
   722                           ;lcd.c: 34:         Lcd_Cmd(z);
   723   000842  5014               	movf	Lcd_Set_Cursor@z^0,w,c
   724   000844  EC55  F006         	call	_Lcd_Cmd
   725   000848                     
   726                           ;lcd.c: 35:         Lcd_Cmd(y);
   727   000848  5015               	movf	Lcd_Set_Cursor@y^0,w,c
   728   00084A  EC55  F006         	call	_Lcd_Cmd
   729                           
   730                           ;lcd.c: 36:     }
   731   00084E  EF77  F004         	goto	l98
   732   000852                     l1251:
   733   000852  0E02               	movlw	2
   734   000854  1813               	xorwf	Lcd_Set_Cursor@a^0,w,c
   735   000856  A4D8               	btfss	status,2,c
   736   000858  EF30  F004         	goto	u341
   737   00085C  EF32  F004         	goto	u340
   738   000860                     u341:
   739   000860  EF43  F004         	goto	l1259
   740   000864                     u340:
   741   000864                     
   742                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
   743   000864  5012               	movf	Lcd_Set_Cursor@b^0,w,c
   744   000866  0FBF               	addlw	191
   745   000868  6E16               	movwf	Lcd_Set_Cursor@temp^0,c
   746                           
   747                           ;lcd.c: 40:         z = temp>>4;
   748   00086A  3816               	swapf	Lcd_Set_Cursor@temp^0,w,c
   749   00086C  0B0F               	andlw	15
   750   00086E  6E14               	movwf	Lcd_Set_Cursor@z^0,c
   751                           
   752                           ;lcd.c: 41:         y = temp & 0x0F;
   753   000870  5016               	movf	Lcd_Set_Cursor@temp^0,w,c
   754   000872  0B0F               	andlw	15
   755   000874  6E15               	movwf	Lcd_Set_Cursor@y^0,c
   756   000876                     
   757                           ;lcd.c: 42:         Lcd_Cmd(z);
   758   000876  5014               	movf	Lcd_Set_Cursor@z^0,w,c
   759   000878  EC55  F006         	call	_Lcd_Cmd
   760   00087C                     
   761                           ;lcd.c: 43:         Lcd_Cmd(y);
   762   00087C  5015               	movf	Lcd_Set_Cursor@y^0,w,c
   763   00087E  EC55  F006         	call	_Lcd_Cmd
   764                           
   765                           ;lcd.c: 44:     }
   766   000882  EF77  F004         	goto	l98
   767   000886                     l1259:
   768   000886  0E03               	movlw	3
   769   000888  1813               	xorwf	Lcd_Set_Cursor@a^0,w,c
   770   00088A  A4D8               	btfss	status,2,c
   771   00088C  EF4A  F004         	goto	u351
   772   000890  EF4C  F004         	goto	u350
   773   000894                     u351:
   774   000894  EF5D  F004         	goto	l1267
   775   000898                     u350:
   776   000898                     
   777                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x94 + b - 1;
   778   000898  5012               	movf	Lcd_Set_Cursor@b^0,w,c
   779   00089A  0F93               	addlw	147
   780   00089C  6E16               	movwf	Lcd_Set_Cursor@temp^0,c
   781                           
   782                           ;lcd.c: 48:         z = temp>>4;
   783   00089E  3816               	swapf	Lcd_Set_Cursor@temp^0,w,c
   784   0008A0  0B0F               	andlw	15
   785   0008A2  6E14               	movwf	Lcd_Set_Cursor@z^0,c
   786                           
   787                           ;lcd.c: 49:         y = temp & 0x0F;
   788   0008A4  5016               	movf	Lcd_Set_Cursor@temp^0,w,c
   789   0008A6  0B0F               	andlw	15
   790   0008A8  6E15               	movwf	Lcd_Set_Cursor@y^0,c
   791   0008AA                     
   792                           ;lcd.c: 50:         Lcd_Cmd(z);
   793   0008AA  5014               	movf	Lcd_Set_Cursor@z^0,w,c
   794   0008AC  EC55  F006         	call	_Lcd_Cmd
   795   0008B0                     
   796                           ;lcd.c: 51:         Lcd_Cmd(y);
   797   0008B0  5015               	movf	Lcd_Set_Cursor@y^0,w,c
   798   0008B2  EC55  F006         	call	_Lcd_Cmd
   799                           
   800                           ;lcd.c: 52:     }
   801   0008B6  EF77  F004         	goto	l98
   802   0008BA                     l1267:
   803   0008BA  0E04               	movlw	4
   804   0008BC  1813               	xorwf	Lcd_Set_Cursor@a^0,w,c
   805   0008BE  A4D8               	btfss	status,2,c
   806   0008C0  EF64  F004         	goto	u361
   807   0008C4  EF66  F004         	goto	u360
   808   0008C8                     u361:
   809   0008C8  EF77  F004         	goto	l94
   810   0008CC                     u360:
   811   0008CC                     
   812                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD4 + b - 1;
   813   0008CC  5012               	movf	Lcd_Set_Cursor@b^0,w,c
   814   0008CE  0FD3               	addlw	211
   815   0008D0  6E16               	movwf	Lcd_Set_Cursor@temp^0,c
   816                           
   817                           ;lcd.c: 56:         z = temp>>4;
   818   0008D2  3816               	swapf	Lcd_Set_Cursor@temp^0,w,c
   819   0008D4  0B0F               	andlw	15
   820   0008D6  6E14               	movwf	Lcd_Set_Cursor@z^0,c
   821                           
   822                           ;lcd.c: 57:         y = temp & 0x0F;
   823   0008D8  5016               	movf	Lcd_Set_Cursor@temp^0,w,c
   824   0008DA  0B0F               	andlw	15
   825   0008DC  6E15               	movwf	Lcd_Set_Cursor@y^0,c
   826   0008DE                     
   827                           ;lcd.c: 58:         Lcd_Cmd(z);
   828   0008DE  5014               	movf	Lcd_Set_Cursor@z^0,w,c
   829   0008E0  EC55  F006         	call	_Lcd_Cmd
   830   0008E4                     
   831                           ;lcd.c: 59:         Lcd_Cmd(y);
   832   0008E4  5015               	movf	Lcd_Set_Cursor@y^0,w,c
   833   0008E6  EC55  F006         	call	_Lcd_Cmd
   834   0008EA  EF77  F004         	goto	l98
   835   0008EE                     l94:
   836   0008EE                     l98:
   837   0008EE  0012               	return		;funcret
   838   0008F0                     __end_of_Lcd_Set_Cursor:
   839                           	callstack 0
   840                           
   841 ;; *************** function _Lcd_Init *****************
   842 ;; Defined at:
   843 ;;		line 63 in file "lcd.c"
   844 ;; Parameters:    Size  Location     Type
   845 ;;		None
   846 ;; Auto vars:     Size  Location     Type
   847 ;;		None
   848 ;; Return value:  Size  Location     Type
   849 ;;                  1    wreg      void 
   850 ;; Registers used:
   851 ;;		wreg, status,2, cstack
   852 ;; Tracked objects:
   853 ;;		On entry : 0/0
   854 ;;		On exit  : 0/0
   855 ;;		Unchanged: 0/0
   856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   857 ;;      Params:         0       0       0       0       0       0       0       0       0
   858 ;;      Locals:         0       0       0       0       0       0       0       0       0
   859 ;;      Temps:          1       0       0       0       0       0       0       0       0
   860 ;;      Totals:         1       0       0       0       0       0       0       0       0
   861 ;;Total ram usage:        1 bytes
   862 ;; Hardware stack levels used: 1
   863 ;; Hardware stack levels required when called: 7
   864 ;; This function calls:
   865 ;;		_Lcd_Clear
   866 ;;		_Lcd_Cmd
   867 ;;		_Lcd_Port
   868 ;; This function is called by:
   869 ;;		_main
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           	psect	text5
   874   0009C2                     __ptext5:
   875                           	callstack 0
   876   0009C2                     _Lcd_Init:
   877                           	callstack 23
   878   0009C2                     
   879                           ;lcd.c: 65:  TRISDbits.TRISD2 = 0;
   880   0009C2  9495               	bcf	149,2,c	;volatile
   881                           
   882                           ;lcd.c: 66:  TRISDbits.TRISD3 = 0;
   883   0009C4  9695               	bcf	149,3,c	;volatile
   884                           
   885                           ;lcd.c: 67:  TRISDbits.TRISD4 = 0;
   886   0009C6  9895               	bcf	149,4,c	;volatile
   887                           
   888                           ;lcd.c: 68:  TRISDbits.TRISD5 = 0;
   889   0009C8  9A95               	bcf	149,5,c	;volatile
   890                           
   891                           ;lcd.c: 69:  TRISDbits.TRISD6 = 0;
   892   0009CA  9C95               	bcf	149,6,c	;volatile
   893                           
   894                           ;lcd.c: 70:  TRISDbits.TRISD7 = 0;
   895   0009CC  9E95               	bcf	149,7,c	;volatile
   896   0009CE                     
   897                           ;lcd.c: 71:     Lcd_Port(0x00);
   898   0009CE  0E00               	movlw	0
   899   0009D0  EC58  F005         	call	_Lcd_Port
   900   0009D4                     
   901                           ;lcd.c: 72:     _delay((unsigned long)((20)*(12000000/4000.0)));
   902   0009D4  0E4E               	movlw	78
   903   0009D6  6E12               	movwf	??_Lcd_Init^0,c
   904   0009D8  0EEB               	movlw	235
   905   0009DA                     u487:
   906   0009DA  2EE8               	decfsz	wreg,f,c
   907   0009DC  D7FE               	bra	u487
   908   0009DE  2E12               	decfsz	??_Lcd_Init^0,f,c
   909   0009E0  D7FC               	bra	u487
   910   0009E2  F000               	nop	
   911   0009E4                     
   912                           ;lcd.c: 73:     Lcd_Cmd(0x03);
   913   0009E4  0E03               	movlw	3
   914   0009E6  EC55  F006         	call	_Lcd_Cmd
   915   0009EA                     
   916                           ;lcd.c: 74:     _delay((unsigned long)((5)*(12000000/4000.0)));
   917   0009EA  0E14               	movlw	20
   918   0009EC  6E12               	movwf	??_Lcd_Init^0,c
   919   0009EE  0E7A               	movlw	122
   920   0009F0                     u497:
   921   0009F0  2EE8               	decfsz	wreg,f,c
   922   0009F2  D7FE               	bra	u497
   923   0009F4  2E12               	decfsz	??_Lcd_Init^0,f,c
   924   0009F6  D7FC               	bra	u497
   925   0009F8                     
   926                           ;lcd.c: 75:     Lcd_Cmd(0x03);
   927   0009F8  0E03               	movlw	3
   928   0009FA  EC55  F006         	call	_Lcd_Cmd
   929   0009FE                     
   930                           ;lcd.c: 76:     _delay((unsigned long)((11)*(12000000/4000.0)));
   931   0009FE  0E2B               	movlw	43
   932   000A00  6E12               	movwf	??_Lcd_Init^0,c
   933   000A02  0EDA               	movlw	218
   934   000A04                     u507:
   935   000A04  2EE8               	decfsz	wreg,f,c
   936   000A06  D7FE               	bra	u507
   937   000A08  2E12               	decfsz	??_Lcd_Init^0,f,c
   938   000A0A  D7FC               	bra	u507
   939   000A0C  D000               	nop2	
   940   000A0E                     
   941                           ;lcd.c: 77:     Lcd_Cmd(0x03);
   942   000A0E  0E03               	movlw	3
   943   000A10  EC55  F006         	call	_Lcd_Cmd
   944   000A14                     
   945                           ;lcd.c: 78:     Lcd_Cmd(0x02);
   946   000A14  0E02               	movlw	2
   947   000A16  EC55  F006         	call	_Lcd_Cmd
   948   000A1A                     
   949                           ;lcd.c: 79:     Lcd_Cmd(0x02);
   950   000A1A  0E02               	movlw	2
   951   000A1C  EC55  F006         	call	_Lcd_Cmd
   952   000A20                     
   953                           ;lcd.c: 80:     Lcd_Cmd(0x08);
   954   000A20  0E08               	movlw	8
   955   000A22  EC55  F006         	call	_Lcd_Cmd
   956   000A26                     
   957                           ;lcd.c: 81:     Lcd_Cmd(0x00);
   958   000A26  0E00               	movlw	0
   959   000A28  EC55  F006         	call	_Lcd_Cmd
   960   000A2C                     
   961                           ;lcd.c: 82:     Lcd_Cmd(0x0C);
   962   000A2C  0E0C               	movlw	12
   963   000A2E  EC55  F006         	call	_Lcd_Cmd
   964   000A32                     
   965                           ;lcd.c: 83:     Lcd_Cmd(0x00);
   966   000A32  0E00               	movlw	0
   967   000A34  EC55  F006         	call	_Lcd_Cmd
   968   000A38                     
   969                           ;lcd.c: 84:     Lcd_Cmd(0x06);
   970   000A38  0E06               	movlw	6
   971   000A3A  EC55  F006         	call	_Lcd_Cmd
   972   000A3E                     
   973                           ;lcd.c: 85:     Lcd_Clear();
   974   000A3E  EC8F  F006         	call	_Lcd_Clear	;wreg free
   975   000A42  0012               	return		;funcret
   976   000A44                     __end_of_Lcd_Init:
   977                           	callstack 0
   978                           
   979 ;; *************** function _Lcd_Clear *****************
   980 ;; Defined at:
   981 ;;		line 20 in file "lcd.c"
   982 ;; Parameters:    Size  Location     Type
   983 ;;		None
   984 ;; Auto vars:     Size  Location     Type
   985 ;;		None
   986 ;; Return value:  Size  Location     Type
   987 ;;                  1    wreg      void 
   988 ;; Registers used:
   989 ;;		wreg, status,2, cstack
   990 ;; Tracked objects:
   991 ;;		On entry : 0/0
   992 ;;		On exit  : 0/0
   993 ;;		Unchanged: 0/0
   994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   995 ;;      Params:         0       0       0       0       0       0       0       0       0
   996 ;;      Locals:         0       0       0       0       0       0       0       0       0
   997 ;;      Temps:          0       0       0       0       0       0       0       0       0
   998 ;;      Totals:         0       0       0       0       0       0       0       0       0
   999 ;;Total ram usage:        0 bytes
  1000 ;; Hardware stack levels used: 1
  1001 ;; Hardware stack levels required when called: 6
  1002 ;; This function calls:
  1003 ;;		_Lcd_Cmd
  1004 ;; This function is called by:
  1005 ;;		_main
  1006 ;;		_Lcd_Init
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           	psect	text6
  1011   000D1E                     __ptext6:
  1012                           	callstack 0
  1013   000D1E                     _Lcd_Clear:
  1014                           	callstack 23
  1015   000D1E                     
  1016                           ;lcd.c: 22:     Lcd_Cmd(0);
  1017   000D1E  0E00               	movlw	0
  1018   000D20  EC55  F006         	call	_Lcd_Cmd
  1019                           
  1020                           ;lcd.c: 23:     Lcd_Cmd(1);
  1021   000D24  0E01               	movlw	1
  1022   000D26  EC55  F006         	call	_Lcd_Cmd
  1023   000D2A  0012               	return		;funcret
  1024   000D2C                     __end_of_Lcd_Clear:
  1025                           	callstack 0
  1026                           
  1027 ;; *************** function _Lcd_Cmd *****************
  1028 ;; Defined at:
  1029 ;;		line 11 in file "lcd.c"
  1030 ;; Parameters:    Size  Location     Type
  1031 ;;  a               1    wreg     unsigned char 
  1032 ;; Auto vars:     Size  Location     Type
  1033 ;;  a               1   16[COMRAM] unsigned char 
  1034 ;; Return value:  Size  Location     Type
  1035 ;;                  1    wreg      void 
  1036 ;; Registers used:
  1037 ;;		wreg, status,2, cstack
  1038 ;; Tracked objects:
  1039 ;;		On entry : 0/0
  1040 ;;		On exit  : 0/0
  1041 ;;		Unchanged: 0/0
  1042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1043 ;;      Params:         0       0       0       0       0       0       0       0       0
  1044 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1045 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1046 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1047 ;;Total ram usage:        2 bytes
  1048 ;; Hardware stack levels used: 1
  1049 ;; Hardware stack levels required when called: 5
  1050 ;; This function calls:
  1051 ;;		_Lcd_Port
  1052 ;; This function is called by:
  1053 ;;		_Lcd_Clear
  1054 ;;		_Lcd_Set_Cursor
  1055 ;;		_Lcd_Init
  1056 ;;		_Lcd_Shift_Right
  1057 ;;		_Lcd_Shift_Left
  1058 ;;		_Lcd_Blink
  1059 ;;		_Lcd_NoBlink
  1060 ;;		_Lcd_CGRAM_Init
  1061 ;;		_Lcd_CGRAM_Close
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065                           	psect	text7
  1066   000CAA                     __ptext7:
  1067                           	callstack 0
  1068   000CAA                     _Lcd_Cmd:
  1069                           	callstack 24
  1070                           
  1071                           ;incstack = 0
  1072                           ;Lcd_Cmd@a stored from wreg
  1073   000CAA  6E11               	movwf	Lcd_Cmd@a^0,c
  1074   000CAC                     
  1075                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATDbits.LD2 = 0;
  1076   000CAC  948C               	bcf	140,2,c	;volatile
  1077   000CAE                     
  1078                           ;lcd.c: 14:     Lcd_Port(a);
  1079   000CAE  5011               	movf	Lcd_Cmd@a^0,w,c
  1080   000CB0  EC58  F005         	call	_Lcd_Port
  1081   000CB4                     
  1082                           ;lcd.c: 15:     LATDbits.LD3 = 1;
  1083   000CB4  868C               	bsf	140,3,c	;volatile
  1084   000CB6                     
  1085                           ;lcd.c: 16:     _delay((unsigned long)((4)*(12000000/4000.0)));
  1086   000CB6  0E10               	movlw	16
  1087   000CB8  6E10               	movwf	??_Lcd_Cmd^0,c
  1088   000CBA  0E94               	movlw	148
  1089   000CBC                     u517:
  1090   000CBC  2EE8               	decfsz	wreg,f,c
  1091   000CBE  D7FE               	bra	u517
  1092   000CC0  2E10               	decfsz	??_Lcd_Cmd^0,f,c
  1093   000CC2  D7FC               	bra	u517
  1094   000CC4  D000               	nop2	
  1095   000CC6                     
  1096                           ;lcd.c: 17:     LATDbits.LD3 = 0;
  1097   000CC6  968C               	bcf	140,3,c	;volatile
  1098   000CC8  0012               	return		;funcret
  1099   000CCA                     __end_of_Lcd_Cmd:
  1100                           	callstack 0
  1101                           
  1102 ;; *************** function _Lcd_Port *****************
  1103 ;; Defined at:
  1104 ;;		line 3 in file "lcd.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;  a               1    wreg     unsigned char 
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;  a               1   14[COMRAM] unsigned char 
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  1    wreg      void 
  1111 ;; Registers used:
  1112 ;;		wreg
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1118 ;;      Params:         0       0       0       0       0       0       0       0       0
  1119 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1120 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1121 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1122 ;;Total ram usage:        1 bytes
  1123 ;; Hardware stack levels used: 1
  1124 ;; Hardware stack levels required when called: 4
  1125 ;; This function calls:
  1126 ;;		Nothing
  1127 ;; This function is called by:
  1128 ;;		_Lcd_Cmd
  1129 ;;		_Lcd_Init
  1130 ;;		_Lcd_Write_Char
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134                           	psect	text8
  1135   000AB0                     __ptext8:
  1136                           	callstack 0
  1137   000AB0                     _Lcd_Port:
  1138                           	callstack 24
  1139                           
  1140                           ;incstack = 0
  1141                           ;Lcd_Port@a stored from wreg
  1142   000AB0  6E0F               	movwf	Lcd_Port@a^0,c
  1143   000AB2                     
  1144                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATDbits.LD4 = 1) 
      +                          : (LATDbits.LD4 = 0);
  1145   000AB2  A00F               	btfss	Lcd_Port@a^0,0,c
  1146   000AB4  EF5E  F005         	goto	u11
  1147   000AB8  EF60  F005         	goto	u10
  1148   000ABC                     u11:
  1149   000ABC  EF63  F005         	goto	l67
  1150   000AC0                     u10:
  1151   000AC0  888C               	bsf	140,4,c	;volatile
  1152   000AC2  EF64  F005         	goto	l837
  1153   000AC6                     l67:
  1154   000AC6  988C               	bcf	140,4,c	;volatile
  1155   000AC8                     l837:
  1156                           
  1157                           ;lcd.c: 6:     (a & 2) ? (LATDbits.LD5 = 1) : (LATDbits.LD5 = 0);
  1158   000AC8  A20F               	btfss	Lcd_Port@a^0,1,c
  1159   000ACA  EF69  F005         	goto	u21
  1160   000ACE  EF6B  F005         	goto	u20
  1161   000AD2                     u21:
  1162   000AD2  EF6E  F005         	goto	l71
  1163   000AD6                     u20:
  1164   000AD6  8A8C               	bsf	140,5,c	;volatile
  1165   000AD8  EF6F  F005         	goto	l841
  1166   000ADC                     l71:
  1167   000ADC  9A8C               	bcf	140,5,c	;volatile
  1168   000ADE                     l841:
  1169                           
  1170                           ;lcd.c: 7:     (a & 4) ? (LATDbits.LD6 = 1) : (LATDbits.LD6 = 0);
  1171   000ADE  A40F               	btfss	Lcd_Port@a^0,2,c
  1172   000AE0  EF74  F005         	goto	u31
  1173   000AE4  EF76  F005         	goto	u30
  1174   000AE8                     u31:
  1175   000AE8  EF79  F005         	goto	l75
  1176   000AEC                     u30:
  1177   000AEC  8C8C               	bsf	140,6,c	;volatile
  1178   000AEE  EF7A  F005         	goto	l845
  1179   000AF2                     l75:
  1180   000AF2  9C8C               	bcf	140,6,c	;volatile
  1181   000AF4                     l845:
  1182                           
  1183                           ;lcd.c: 8:     (a & 8) ? (LATDbits.LD7 = 1) : (LATDbits.LD7 = 0);
  1184   000AF4  A60F               	btfss	Lcd_Port@a^0,3,c
  1185   000AF6  EF7F  F005         	goto	u41
  1186   000AFA  EF81  F005         	goto	u40
  1187   000AFE                     u41:
  1188   000AFE  EF84  F005         	goto	l79
  1189   000B02                     u40:
  1190   000B02  8E8C               	bsf	140,7,c	;volatile
  1191   000B04  EF85  F005         	goto	l82
  1192   000B08                     l79:
  1193   000B08  9E8C               	bcf	140,7,c	;volatile
  1194   000B0A                     l82:
  1195   000B0A  0012               	return		;funcret
  1196   000B0C                     __end_of_Lcd_Port:
  1197                           	callstack 0
  1198                           
  1199 ;; *************** function _InitPort *****************
  1200 ;; Defined at:
  1201 ;;		line 17 in file "condigoprincipal.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;		None
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;		None
  1206 ;; Return value:  Size  Location     Type
  1207 ;;                  1    wreg      void 
  1208 ;; Registers used:
  1209 ;;		wreg, status,2
  1210 ;; Tracked objects:
  1211 ;;		On entry : 0/0
  1212 ;;		On exit  : 0/0
  1213 ;;		Unchanged: 0/0
  1214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1215 ;;      Params:         0       0       0       0       0       0       0       0       0
  1216 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1217 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1218 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1219 ;;Total ram usage:        0 bytes
  1220 ;; Hardware stack levels used: 1
  1221 ;; Hardware stack levels required when called: 4
  1222 ;; This function calls:
  1223 ;;		Nothing
  1224 ;; This function is called by:
  1225 ;;		_main
  1226 ;; This function uses a non-reentrant model
  1227 ;;
  1228                           
  1229                           	psect	text9
  1230   000CEA                     __ptext9:
  1231                           	callstack 0
  1232   000CEA                     _InitPort:
  1233                           	callstack 26
  1234   000CEA                     
  1235                           ;condigoprincipal.c: 18:     ANSELC = 0x00;
  1236   000CEA  0E00               	movlw	0
  1237   000CEC  010F               	movlb	15	; () banked
  1238   000CEE  6F5D               	movwf	93,b	;volatile
  1239                           
  1240                           ;condigoprincipal.c: 19:     ANSELA = 0x00;
  1241   000CF0  0E00               	movlw	0
  1242   000CF2  6F5B               	movwf	91,b	;volatile
  1243                           
  1244                           ;condigoprincipal.c: 20:     LATA = 0;
  1245   000CF4  0E00               	movlw	0
  1246   000CF6  6E89               	movwf	137,c	;volatile
  1247                           
  1248                           ;condigoprincipal.c: 21:     LATC = 0;
  1249   000CF8  0E00               	movlw	0
  1250   000CFA  6E8B               	movwf	139,c	;volatile
  1251                           
  1252                           ;condigoprincipal.c: 22:     TRISC = 1;
  1253   000CFC  0E01               	movlw	1
  1254   000CFE  6E94               	movwf	148,c	;volatile
  1255                           
  1256                           ;condigoprincipal.c: 23:     TRISA = 0;
  1257   000D00  0E00               	movlw	0
  1258   000D02  6E92               	movwf	146,c	;volatile
  1259   000D04                     
  1260                           ; BSR set to: 15
  1261   000D04  0012               	return		;funcret
  1262   000D06                     __end_of_InitPort:
  1263                           	callstack 0
  1264                           
  1265 ;; *************** function _ISR_timer0 *****************
  1266 ;; Defined at:
  1267 ;;		line 62 in file "condigoprincipal.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;		None
  1270 ;; Auto vars:     Size  Location     Type
  1271 ;;		None
  1272 ;; Return value:  Size  Location     Type
  1273 ;;                  1    wreg      void 
  1274 ;; Registers used:
  1275 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1276 ;; Tracked objects:
  1277 ;;		On entry : 0/0
  1278 ;;		On exit  : 0/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1281 ;;      Params:         0       0       0       0       0       0       0       0       0
  1282 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1283 ;;      Temps:          4       0       0       0       0       0       0       0       0
  1284 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1285 ;;Total ram usage:        4 bytes
  1286 ;; Hardware stack levels used: 1
  1287 ;; Hardware stack levels required when called: 3
  1288 ;; This function calls:
  1289 ;;		i2_Lcd_Set_Cursor
  1290 ;;		i2_Lcd_Write_String
  1291 ;; This function is called by:
  1292 ;;		Interrupt level 2
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296                           	psect	intcode
  1297   000008                     __pintcode:
  1298                           	callstack 0
  1299   000008                     _ISR_timer0:
  1300                           	callstack 23
  1301                           
  1302                           ; BSR set to: 15
  1303                           ;incstack = 0
  1304   000008  821E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1305   00000A  CFF6 F00B          	movff	tblptrl,??_ISR_timer0
  1306   00000E  CFF7 F00C          	movff	tblptrh,??_ISR_timer0+1
  1307   000012  CFF8 F00D          	movff	tblptru,??_ISR_timer0+2
  1308   000016  CFF5 F00E          	movff	tablat,??_ISR_timer0+3
  1309   00001A                     
  1310                           ;condigoprincipal.c: 63:             if(INTCONbits.TMR0IF){
  1311   00001A  A4F2               	btfss	242,2,c	;volatile
  1312   00001C  EF12  F000         	goto	i2u44_41
  1313   000020  EF14  F000         	goto	i2u44_40
  1314   000024                     i2u44_41:
  1315   000024  EF21  F000         	goto	i2l57
  1316   000028                     i2u44_40:
  1317   000028                     
  1318                           ;condigoprincipal.c: 64:             Lcd_Set_Cursor(2,5);
  1319   000028  0E05               	movlw	5
  1320   00002A  6E04               	movwf	i2Lcd_Set_Cursor@b^0,c
  1321   00002C  0E02               	movlw	2
  1322   00002E  EC78  F004         	call	i2_Lcd_Set_Cursor
  1323   000032                     
  1324                           ;condigoprincipal.c: 65:             Lcd_Write_String("Terminado");
  1325   000032  0E01               	movlw	low STR_3
  1326   000034  6E05               	movwf	i2Lcd_Write_String@a^0,c
  1327   000036  0E08               	movlw	high STR_3
  1328   000038  6E06               	movwf	(i2Lcd_Write_String@a+1)^0,c
  1329   00003A  ECDF  F005         	call	i2_Lcd_Write_String	;wreg free
  1330   00003E                     
  1331                           ;condigoprincipal.c: 66:             INTCONbits.INT0IF = 0;
  1332   00003E  92F2               	bcf	242,1,c	;volatile
  1333   000040                     
  1334                           ;condigoprincipal.c: 67:             LATAbits.LA0 = 0;
  1335   000040  9089               	bcf	137,0,c	;volatile
  1336   000042                     i2l57:
  1337   000042  C00E  FFF5         	movff	??_ISR_timer0+3,tablat
  1338   000046  C00D  FFF8         	movff	??_ISR_timer0+2,tblptru
  1339   00004A  C00C  FFF7         	movff	??_ISR_timer0+1,tblptrh
  1340   00004E  C00B  FFF6         	movff	??_ISR_timer0,tblptrl
  1341   000052  921E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1342   000054  0011               	retfie		f
  1343   000056                     __end_of_ISR_timer0:
  1344                           	callstack 0
  1345                           
  1346 ;; *************** function i2_Lcd_Write_String *****************
  1347 ;; Defined at:
  1348 ;;		line 104 in file "lcd.c"
  1349 ;; Parameters:    Size  Location     Type
  1350 ;;  a               2    4[COMRAM] PTR const unsigned char 
  1351 ;;		 -> STR_3(10), STR_2(10), STR_1(7), 
  1352 ;; Auto vars:     Size  Location     Type
  1353 ;;  i               2    8[COMRAM] int 
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  1    wreg      void 
  1356 ;; Registers used:
  1357 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1363 ;;      Params:         2       0       0       0       0       0       0       0       0
  1364 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1365 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1366 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1367 ;;Total ram usage:        6 bytes
  1368 ;; Hardware stack levels used: 1
  1369 ;; Hardware stack levels required when called: 2
  1370 ;; This function calls:
  1371 ;;		i2_Lcd_Write_Char
  1372 ;; This function is called by:
  1373 ;;		_ISR_timer0
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           	psect	text11
  1378   000BBE                     __ptext11:
  1379                           	callstack 0
  1380   000BBE                     i2_Lcd_Write_String:
  1381                           	callstack 23
  1382   000BBE                     
  1383                           ;lcd.c: 104: void Lcd_Write_String(const char *a);lcd.c: 105: {;lcd.c: 106:     int i;;l
      +                          cd.c: 107:     for(i=0;a[i]!='\0';i++)
  1384   000BBE  0E00               	movlw	0
  1385   000BC0  6E0A               	movwf	(i2Lcd_Write_String@i+1)^0,c
  1386   000BC2  0E00               	movlw	0
  1387   000BC4  6E09               	movwf	i2Lcd_Write_String@i^0,c
  1388   000BC6  EFF5  F005         	goto	i2l1321
  1389   000BCA                     i2l1317:
  1390                           
  1391                           ;lcd.c: 108:         Lcd_Write_Char(a[i]);
  1392   000BCA  5009               	movf	i2Lcd_Write_String@i^0,w,c
  1393   000BCC  2405               	addwf	i2Lcd_Write_String@a^0,w,c
  1394   000BCE  6E07               	movwf	??i2_Lcd_Write_String^0,c
  1395   000BD0  500A               	movf	(i2Lcd_Write_String@i+1)^0,w,c
  1396   000BD2  2006               	addwfc	(i2Lcd_Write_String@a+1)^0,w,c
  1397   000BD4  6E08               	movwf	(??i2_Lcd_Write_String+1)^0,c
  1398   000BD6  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
  1399   000BDA  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
  1400   000BDE                     	if	0	;tblptru may be non-zero
  1401   000BDE                     	endif
  1402   000BDE                     	if	0	;tblptru may be non-zero
  1403   000BDE                     	endif
  1404   000BDE  0008               	tblrd		*
  1405   000BE0  50F5               	movf	tablat,w,c
  1406   000BE2  EC24  F006         	call	i2_Lcd_Write_Char
  1407   000BE6  4A09               	infsnz	i2Lcd_Write_String@i^0,f,c
  1408   000BE8  2A0A               	incf	(i2Lcd_Write_String@i+1)^0,f,c
  1409   000BEA                     i2l1321:
  1410   000BEA  5009               	movf	i2Lcd_Write_String@i^0,w,c
  1411   000BEC  2405               	addwf	i2Lcd_Write_String@a^0,w,c
  1412   000BEE  6E07               	movwf	??i2_Lcd_Write_String^0,c
  1413   000BF0  500A               	movf	(i2Lcd_Write_String@i+1)^0,w,c
  1414   000BF2  2006               	addwfc	(i2Lcd_Write_String@a+1)^0,w,c
  1415   000BF4  6E08               	movwf	(??i2_Lcd_Write_String+1)^0,c
  1416   000BF6  C007  FFF6         	movff	??i2_Lcd_Write_String,tblptrl
  1417   000BFA  C008  FFF7         	movff	??i2_Lcd_Write_String+1,tblptrh
  1418   000BFE                     	if	0	;tblptru may be non-zero
  1419   000BFE                     	endif
  1420   000BFE                     	if	0	;tblptru may be non-zero
  1421   000BFE                     	endif
  1422   000BFE  0008               	tblrd		*
  1423   000C00  50F5               	movf	tablat,w,c
  1424   000C02  0900               	iorlw	0
  1425   000C04  A4D8               	btfss	status,2,c
  1426   000C06  EF07  F006         	goto	i2u42_41
  1427   000C0A  EF09  F006         	goto	i2u42_40
  1428   000C0E                     i2u42_41:
  1429   000C0E  EFE5  F005         	goto	i2l1317
  1430   000C12                     i2u42_40:
  1431   000C12  0012               	return		;funcret
  1432   000C14                     __end_ofi2_Lcd_Write_String:
  1433                           	callstack 0
  1434                           
  1435 ;; *************** function i2_Lcd_Write_Char *****************
  1436 ;; Defined at:
  1437 ;;		line 88 in file "lcd.c"
  1438 ;; Parameters:    Size  Location     Type
  1439 ;;  a               1    wreg     unsigned char 
  1440 ;; Auto vars:     Size  Location     Type
  1441 ;;  a               1    3[COMRAM] unsigned char 
  1442 ;;  y               1    2[COMRAM] unsigned char 
  1443 ;;  temp            1    1[COMRAM] unsigned char 
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  1    wreg      void 
  1446 ;; Registers used:
  1447 ;;		wreg, status,2, status,0, cstack
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1453 ;;      Params:         0       0       0       0       0       0       0       0       0
  1454 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1455 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1456 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1457 ;;Total ram usage:        3 bytes
  1458 ;; Hardware stack levels used: 1
  1459 ;; Hardware stack levels required when called: 1
  1460 ;; This function calls:
  1461 ;;		i2_Lcd_Port
  1462 ;; This function is called by:
  1463 ;;		i2_Lcd_Write_String
  1464 ;; This function uses a non-reentrant model
  1465 ;;
  1466                           
  1467                           	psect	text12
  1468   000C48                     __ptext12:
  1469                           	callstack 0
  1470   000C48                     i2_Lcd_Write_Char:
  1471                           	callstack 23
  1472                           
  1473                           ;incstack = 0
  1474                           ;i2Lcd_Write_Char@a stored from wreg
  1475   000C48  6E04               	movwf	i2Lcd_Write_Char@a^0,c
  1476   000C4A                     
  1477                           ;lcd.c: 88: void Lcd_Write_Char(char a);lcd.c: 89: {;lcd.c: 90:     char temp,y;;lcd.c: 
      +                          91:     temp = a&0x0F;
  1478   000C4A  5004               	movf	i2Lcd_Write_Char@a^0,w,c
  1479   000C4C  0B0F               	andlw	15
  1480   000C4E  6E02               	movwf	i2Lcd_Write_Char@temp^0,c
  1481                           
  1482                           ;lcd.c: 92:     y = a&0xF0;
  1483   000C50  5004               	movf	i2Lcd_Write_Char@a^0,w,c
  1484   000C52  0BF0               	andlw	240
  1485   000C54  6E03               	movwf	i2Lcd_Write_Char@y^0,c
  1486   000C56                     
  1487                           ;lcd.c: 93:     LATDbits.LD2 = 1;
  1488   000C56  848C               	bsf	140,2,c	;volatile
  1489   000C58                     
  1490                           ;lcd.c: 94:     Lcd_Port(y>>4);
  1491   000C58  3803               	swapf	i2Lcd_Write_Char@y^0,w,c
  1492   000C5A  0B0F               	andlw	15
  1493   000C5C  EC86  F005         	call	i2_Lcd_Port
  1494   000C60                     
  1495                           ;lcd.c: 95:     LATDbits.LD3 = 1;
  1496   000C60  868C               	bsf	140,3,c	;volatile
  1497   000C62                     
  1498                           ;lcd.c: 96:     _delay((unsigned long)((40)*(12000000/4000000.0)));
  1499   000C62  0E28               	movlw	40
  1500   000C64                     i2u52_47:
  1501   000C64  2EE8               	decfsz	wreg,f,c
  1502   000C66  D7FE               	bra	i2u52_47
  1503   000C68                     
  1504                           ;lcd.c: 97:     LATDbits.LD3 = 0;
  1505   000C68  968C               	bcf	140,3,c	;volatile
  1506   000C6A                     
  1507                           ;lcd.c: 98:     Lcd_Port(temp);
  1508   000C6A  5002               	movf	i2Lcd_Write_Char@temp^0,w,c
  1509   000C6C  EC86  F005         	call	i2_Lcd_Port
  1510   000C70                     
  1511                           ;lcd.c: 99:     LATDbits.LD3 = 1;
  1512   000C70  868C               	bsf	140,3,c	;volatile
  1513   000C72                     
  1514                           ;lcd.c: 100:     _delay((unsigned long)((40)*(12000000/4000000.0)));
  1515   000C72  0E28               	movlw	40
  1516   000C74                     i2u53_47:
  1517   000C74  2EE8               	decfsz	wreg,f,c
  1518   000C76  D7FE               	bra	i2u53_47
  1519   000C78                     
  1520                           ;lcd.c: 101:     LATDbits.LD3 = 0;
  1521   000C78  968C               	bcf	140,3,c	;volatile
  1522   000C7A  0012               	return		;funcret
  1523   000C7C                     __end_ofi2_Lcd_Write_Char:
  1524                           	callstack 0
  1525                           
  1526 ;; *************** function i2_Lcd_Set_Cursor *****************
  1527 ;; Defined at:
  1528 ;;		line 26 in file "lcd.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  a               1    wreg     unsigned char 
  1531 ;;  b               1    3[COMRAM] unsigned char 
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;  a               1    4[COMRAM] unsigned char 
  1534 ;;  temp            1    7[COMRAM] unsigned char 
  1535 ;;  y               1    6[COMRAM] unsigned char 
  1536 ;;  z               1    5[COMRAM] unsigned char 
  1537 ;; Return value:  Size  Location     Type
  1538 ;;                  1    wreg      void 
  1539 ;; Registers used:
  1540 ;;		wreg, status,2, status,0, cstack
  1541 ;; Tracked objects:
  1542 ;;		On entry : 0/0
  1543 ;;		On exit  : 0/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1546 ;;      Params:         1       0       0       0       0       0       0       0       0
  1547 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1548 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1549 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1550 ;;Total ram usage:        5 bytes
  1551 ;; Hardware stack levels used: 1
  1552 ;; Hardware stack levels required when called: 2
  1553 ;; This function calls:
  1554 ;;		i2_Lcd_Cmd
  1555 ;; This function is called by:
  1556 ;;		_ISR_timer0
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           	psect	text13
  1561   0008F0                     __ptext13:
  1562                           	callstack 0
  1563   0008F0                     i2_Lcd_Set_Cursor:
  1564                           	callstack 23
  1565                           
  1566                           ;incstack = 0
  1567                           ;i2Lcd_Set_Cursor@a stored from wreg
  1568   0008F0  6E05               	movwf	i2Lcd_Set_Cursor@a^0,c
  1569   0008F2                     
  1570                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
  1571   0008F2  0405               	decf	i2Lcd_Set_Cursor@a^0,w,c
  1572   0008F4  A4D8               	btfss	status,2,c
  1573   0008F6  EF7F  F004         	goto	i2u38_41
  1574   0008FA  EF81  F004         	goto	i2u38_40
  1575   0008FE                     i2u38_41:
  1576   0008FE  EF92  F004         	goto	i2l1291
  1577   000902                     i2u38_40:
  1578   000902                     
  1579                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
  1580   000902  5004               	movf	i2Lcd_Set_Cursor@b^0,w,c
  1581   000904  0F7F               	addlw	127
  1582   000906  6E08               	movwf	i2Lcd_Set_Cursor@temp^0,c
  1583                           
  1584                           ;lcd.c: 32:         z = temp>>4;
  1585   000908  3808               	swapf	i2Lcd_Set_Cursor@temp^0,w,c
  1586   00090A  0B0F               	andlw	15
  1587   00090C  6E06               	movwf	i2Lcd_Set_Cursor@z^0,c
  1588                           
  1589                           ;lcd.c: 33:         y = temp & 0x0F;
  1590   00090E  5008               	movf	i2Lcd_Set_Cursor@temp^0,w,c
  1591   000910  0B0F               	andlw	15
  1592   000912  6E07               	movwf	i2Lcd_Set_Cursor@y^0,c
  1593   000914                     
  1594                           ;lcd.c: 34:         Lcd_Cmd(z);
  1595   000914  5006               	movf	i2Lcd_Set_Cursor@z^0,w,c
  1596   000916  EC65  F006         	call	i2_Lcd_Cmd
  1597   00091A                     
  1598                           ;lcd.c: 35:         Lcd_Cmd(y);
  1599   00091A  5007               	movf	i2Lcd_Set_Cursor@y^0,w,c
  1600   00091C  EC65  F006         	call	i2_Lcd_Cmd
  1601                           
  1602                           ;lcd.c: 36:     }
  1603   000920  EFE0  F004         	goto	i2l98
  1604   000924                     i2l1291:
  1605   000924  0E02               	movlw	2
  1606   000926  1805               	xorwf	i2Lcd_Set_Cursor@a^0,w,c
  1607   000928  A4D8               	btfss	status,2,c
  1608   00092A  EF99  F004         	goto	i2u39_41
  1609   00092E  EF9B  F004         	goto	i2u39_40
  1610   000932                     i2u39_41:
  1611   000932  EFAC  F004         	goto	i2l1299
  1612   000936                     i2u39_40:
  1613   000936                     
  1614                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
  1615   000936  5004               	movf	i2Lcd_Set_Cursor@b^0,w,c
  1616   000938  0FBF               	addlw	191
  1617   00093A  6E08               	movwf	i2Lcd_Set_Cursor@temp^0,c
  1618                           
  1619                           ;lcd.c: 40:         z = temp>>4;
  1620   00093C  3808               	swapf	i2Lcd_Set_Cursor@temp^0,w,c
  1621   00093E  0B0F               	andlw	15
  1622   000940  6E06               	movwf	i2Lcd_Set_Cursor@z^0,c
  1623                           
  1624                           ;lcd.c: 41:         y = temp & 0x0F;
  1625   000942  5008               	movf	i2Lcd_Set_Cursor@temp^0,w,c
  1626   000944  0B0F               	andlw	15
  1627   000946  6E07               	movwf	i2Lcd_Set_Cursor@y^0,c
  1628   000948                     
  1629                           ;lcd.c: 42:         Lcd_Cmd(z);
  1630   000948  5006               	movf	i2Lcd_Set_Cursor@z^0,w,c
  1631   00094A  EC65  F006         	call	i2_Lcd_Cmd
  1632   00094E                     
  1633                           ;lcd.c: 43:         Lcd_Cmd(y);
  1634   00094E  5007               	movf	i2Lcd_Set_Cursor@y^0,w,c
  1635   000950  EC65  F006         	call	i2_Lcd_Cmd
  1636                           
  1637                           ;lcd.c: 44:     }
  1638   000954  EFE0  F004         	goto	i2l98
  1639   000958                     i2l1299:
  1640   000958  0E03               	movlw	3
  1641   00095A  1805               	xorwf	i2Lcd_Set_Cursor@a^0,w,c
  1642   00095C  A4D8               	btfss	status,2,c
  1643   00095E  EFB3  F004         	goto	i2u40_41
  1644   000962  EFB5  F004         	goto	i2u40_40
  1645   000966                     i2u40_41:
  1646   000966  EFC6  F004         	goto	i2l1307
  1647   00096A                     i2u40_40:
  1648   00096A                     
  1649                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x94 + b - 1;
  1650   00096A  5004               	movf	i2Lcd_Set_Cursor@b^0,w,c
  1651   00096C  0F93               	addlw	147
  1652   00096E  6E08               	movwf	i2Lcd_Set_Cursor@temp^0,c
  1653                           
  1654                           ;lcd.c: 48:         z = temp>>4;
  1655   000970  3808               	swapf	i2Lcd_Set_Cursor@temp^0,w,c
  1656   000972  0B0F               	andlw	15
  1657   000974  6E06               	movwf	i2Lcd_Set_Cursor@z^0,c
  1658                           
  1659                           ;lcd.c: 49:         y = temp & 0x0F;
  1660   000976  5008               	movf	i2Lcd_Set_Cursor@temp^0,w,c
  1661   000978  0B0F               	andlw	15
  1662   00097A  6E07               	movwf	i2Lcd_Set_Cursor@y^0,c
  1663   00097C                     
  1664                           ;lcd.c: 50:         Lcd_Cmd(z);
  1665   00097C  5006               	movf	i2Lcd_Set_Cursor@z^0,w,c
  1666   00097E  EC65  F006         	call	i2_Lcd_Cmd
  1667   000982                     
  1668                           ;lcd.c: 51:         Lcd_Cmd(y);
  1669   000982  5007               	movf	i2Lcd_Set_Cursor@y^0,w,c
  1670   000984  EC65  F006         	call	i2_Lcd_Cmd
  1671                           
  1672                           ;lcd.c: 52:     }
  1673   000988  EFE0  F004         	goto	i2l98
  1674   00098C                     i2l1307:
  1675   00098C  0E04               	movlw	4
  1676   00098E  1805               	xorwf	i2Lcd_Set_Cursor@a^0,w,c
  1677   000990  A4D8               	btfss	status,2,c
  1678   000992  EFCD  F004         	goto	i2u41_41
  1679   000996  EFCF  F004         	goto	i2u41_40
  1680   00099A                     i2u41_41:
  1681   00099A  EFE0  F004         	goto	i2l94
  1682   00099E                     i2u41_40:
  1683   00099E                     
  1684                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD4 + b - 1;
  1685   00099E  5004               	movf	i2Lcd_Set_Cursor@b^0,w,c
  1686   0009A0  0FD3               	addlw	211
  1687   0009A2  6E08               	movwf	i2Lcd_Set_Cursor@temp^0,c
  1688                           
  1689                           ;lcd.c: 56:         z = temp>>4;
  1690   0009A4  3808               	swapf	i2Lcd_Set_Cursor@temp^0,w,c
  1691   0009A6  0B0F               	andlw	15
  1692   0009A8  6E06               	movwf	i2Lcd_Set_Cursor@z^0,c
  1693                           
  1694                           ;lcd.c: 57:         y = temp & 0x0F;
  1695   0009AA  5008               	movf	i2Lcd_Set_Cursor@temp^0,w,c
  1696   0009AC  0B0F               	andlw	15
  1697   0009AE  6E07               	movwf	i2Lcd_Set_Cursor@y^0,c
  1698   0009B0                     
  1699                           ;lcd.c: 58:         Lcd_Cmd(z);
  1700   0009B0  5006               	movf	i2Lcd_Set_Cursor@z^0,w,c
  1701   0009B2  EC65  F006         	call	i2_Lcd_Cmd
  1702   0009B6                     
  1703                           ;lcd.c: 59:         Lcd_Cmd(y);
  1704   0009B6  5007               	movf	i2Lcd_Set_Cursor@y^0,w,c
  1705   0009B8  EC65  F006         	call	i2_Lcd_Cmd
  1706   0009BC  EFE0  F004         	goto	i2l98
  1707   0009C0                     i2l94:
  1708   0009C0                     i2l98:
  1709   0009C0  0012               	return		;funcret
  1710   0009C2                     __end_ofi2_Lcd_Set_Cursor:
  1711                           	callstack 0
  1712                           
  1713 ;; *************** function i2_Lcd_Cmd *****************
  1714 ;; Defined at:
  1715 ;;		line 11 in file "lcd.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;  a               1    wreg     unsigned char 
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;  a               1    2[COMRAM] unsigned char 
  1720 ;; Return value:  Size  Location     Type
  1721 ;;                  1    wreg      void 
  1722 ;; Registers used:
  1723 ;;		wreg, status,2, cstack
  1724 ;; Tracked objects:
  1725 ;;		On entry : 0/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1729 ;;      Params:         0       0       0       0       0       0       0       0       0
  1730 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1731 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1732 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1733 ;;Total ram usage:        2 bytes
  1734 ;; Hardware stack levels used: 1
  1735 ;; Hardware stack levels required when called: 1
  1736 ;; This function calls:
  1737 ;;		i2_Lcd_Port
  1738 ;; This function is called by:
  1739 ;;		i2_Lcd_Set_Cursor
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           	psect	text14
  1744   000CCA                     __ptext14:
  1745                           	callstack 0
  1746   000CCA                     i2_Lcd_Cmd:
  1747                           	callstack 23
  1748                           
  1749                           ;incstack = 0
  1750                           ;i2Lcd_Cmd@a stored from wreg
  1751   000CCA  6E03               	movwf	i2Lcd_Cmd@a^0,c
  1752   000CCC                     
  1753                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATDbits.LD2 = 0;
  1754   000CCC  948C               	bcf	140,2,c	;volatile
  1755   000CCE                     
  1756                           ;lcd.c: 14:     Lcd_Port(a);
  1757   000CCE  5003               	movf	i2Lcd_Cmd@a^0,w,c
  1758   000CD0  EC86  F005         	call	i2_Lcd_Port
  1759   000CD4                     
  1760                           ;lcd.c: 15:     LATDbits.LD3 = 1;
  1761   000CD4  868C               	bsf	140,3,c	;volatile
  1762   000CD6                     
  1763                           ;lcd.c: 16:     _delay((unsigned long)((4)*(12000000/4000.0)));
  1764   000CD6  0E10               	movlw	16
  1765   000CD8  6E02               	movwf	??i2_Lcd_Cmd^0,c
  1766   000CDA  0E94               	movlw	148
  1767   000CDC                     i2u54_47:
  1768   000CDC  2EE8               	decfsz	wreg,f,c
  1769   000CDE  D7FE               	bra	i2u54_47
  1770   000CE0  2E02               	decfsz	??i2_Lcd_Cmd^0,f,c
  1771   000CE2  D7FC               	bra	i2u54_47
  1772   000CE4  D000               	nop2	
  1773   000CE6                     
  1774                           ;lcd.c: 17:     LATDbits.LD3 = 0;
  1775   000CE6  968C               	bcf	140,3,c	;volatile
  1776   000CE8  0012               	return		;funcret
  1777   000CEA                     __end_ofi2_Lcd_Cmd:
  1778                           	callstack 0
  1779                           
  1780 ;; *************** function i2_Lcd_Port *****************
  1781 ;; Defined at:
  1782 ;;		line 3 in file "lcd.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;  a               1    wreg     unsigned char 
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;  a               1    0[COMRAM] unsigned char 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      void 
  1789 ;; Registers used:
  1790 ;;		wreg
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1796 ;;      Params:         0       0       0       0       0       0       0       0       0
  1797 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1798 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1799 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1800 ;;Total ram usage:        1 bytes
  1801 ;; Hardware stack levels used: 1
  1802 ;; This function calls:
  1803 ;;		Nothing
  1804 ;; This function is called by:
  1805 ;;		i2_Lcd_Cmd
  1806 ;;		i2_Lcd_Write_Char
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           	psect	text15
  1811   000B0C                     __ptext15:
  1812                           	callstack 0
  1813   000B0C                     i2_Lcd_Port:
  1814                           	callstack 23
  1815                           
  1816                           ;incstack = 0
  1817                           ;i2Lcd_Port@a stored from wreg
  1818   000B0C  6E01               	movwf	i2Lcd_Port@a^0,c
  1819   000B0E                     
  1820                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATDbits.LD4 = 1) 
      +                          : (LATDbits.LD4 = 0);
  1821   000B0E  A001               	btfss	i2Lcd_Port@a^0,0,c
  1822   000B10  EF8C  F005         	goto	i2u29_41
  1823   000B14  EF8E  F005         	goto	i2u29_40
  1824   000B18                     i2u29_41:
  1825   000B18  EF91  F005         	goto	i2l67
  1826   000B1C                     i2u29_40:
  1827   000B1C  888C               	bsf	140,4,c	;volatile
  1828   000B1E  EF92  F005         	goto	i2l1201
  1829   000B22                     i2l67:
  1830   000B22  988C               	bcf	140,4,c	;volatile
  1831   000B24                     i2l1201:
  1832                           
  1833                           ;lcd.c: 6:     (a & 2) ? (LATDbits.LD5 = 1) : (LATDbits.LD5 = 0);
  1834   000B24  A201               	btfss	i2Lcd_Port@a^0,1,c
  1835   000B26  EF97  F005         	goto	i2u30_41
  1836   000B2A  EF99  F005         	goto	i2u30_40
  1837   000B2E                     i2u30_41:
  1838   000B2E  EF9C  F005         	goto	i2l71
  1839   000B32                     i2u30_40:
  1840   000B32  8A8C               	bsf	140,5,c	;volatile
  1841   000B34  EF9D  F005         	goto	i2l1205
  1842   000B38                     i2l71:
  1843   000B38  9A8C               	bcf	140,5,c	;volatile
  1844   000B3A                     i2l1205:
  1845                           
  1846                           ;lcd.c: 7:     (a & 4) ? (LATDbits.LD6 = 1) : (LATDbits.LD6 = 0);
  1847   000B3A  A401               	btfss	i2Lcd_Port@a^0,2,c
  1848   000B3C  EFA2  F005         	goto	i2u31_41
  1849   000B40  EFA4  F005         	goto	i2u31_40
  1850   000B44                     i2u31_41:
  1851   000B44  EFA7  F005         	goto	i2l75
  1852   000B48                     i2u31_40:
  1853   000B48  8C8C               	bsf	140,6,c	;volatile
  1854   000B4A  EFA8  F005         	goto	i2l1209
  1855   000B4E                     i2l75:
  1856   000B4E  9C8C               	bcf	140,6,c	;volatile
  1857   000B50                     i2l1209:
  1858                           
  1859                           ;lcd.c: 8:     (a & 8) ? (LATDbits.LD7 = 1) : (LATDbits.LD7 = 0);
  1860   000B50  A601               	btfss	i2Lcd_Port@a^0,3,c
  1861   000B52  EFAD  F005         	goto	i2u32_41
  1862   000B56  EFAF  F005         	goto	i2u32_40
  1863   000B5A                     i2u32_41:
  1864   000B5A  EFB2  F005         	goto	i2l79
  1865   000B5E                     i2u32_40:
  1866   000B5E  8E8C               	bsf	140,7,c	;volatile
  1867   000B60  EFB3  F005         	goto	i2l82
  1868   000B64                     i2l79:
  1869   000B64  9E8C               	bcf	140,7,c	;volatile
  1870   000B66                     i2l82:
  1871   000B66  0012               	return		;funcret
  1872   000B68                     __end_ofi2_Lcd_Port:
  1873                           	callstack 0
  1874                           
  1875                           	psect	rparam
  1876   000000                     
  1877                           	psect	temp
  1878   00001E                     btemp:
  1879                           	callstack 0
  1880   00001E                     	ds	1
  1881   000000                     int$flags	set	btemp
  1882   000000                     wtemp8	set	btemp+1
  1883   000000                     ttemp5	set	btemp+1
  1884   000000                     ttemp6	set	btemp+4
  1885   000000                     ttemp7	set	btemp+8
  1886                           
  1887                           	psect	config
  1888                           
  1889                           ;Config register CONFIG1L @ 0x300000
  1890                           ;	PLL Selection
  1891                           ;	PLLSEL = PLL4X, 4x clock multiplier
  1892                           ;	PLL Enable Configuration bit
  1893                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
  1894                           ;	CPU System Clock Postscaler
  1895                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  1896                           ;	Low Speed USB mode with 48 MHz system clock
  1897                           ;	LS48MHZ = SYS48X8, System clock at 48 MHz, USB clock divider is set to 8
  1898   300000                     	org	3145728
  1899   300000  20                 	db	32
  1900                           
  1901                           ;Config register CONFIG1H @ 0x300001
  1902                           ;	Oscillator Selection
  1903                           ;	FOSC = HSM, HS oscillator, medium power 4MHz to 16MHz
  1904                           ;	Primary Oscillator Shutdown
  1905                           ;	PCLKEN = ON, Primary oscillator enabled
  1906                           ;	Fail-Safe Clock Monitor
  1907                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1908                           ;	Internal/External Oscillator Switchover
  1909                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1910   300001                     	org	3145729
  1911   300001  23                 	db	35
  1912                           
  1913                           ;Config register CONFIG2L @ 0x300002
  1914                           ;	Power-up Timer Enable
  1915                           ;	nPWRTEN = ON, Power up timer enabled
  1916                           ;	Brown-out Reset Enable
  1917                           ;	BOREN = OFF, BOR disabled in hardware (SBOREN is ignored)
  1918                           ;	Brown-out Reset Voltage
  1919                           ;	BORV = 190, BOR set to 1.9V nominal
  1920                           ;	Low-Power Brown-out Reset
  1921                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  1922   300002                     	org	3145730
  1923   300002  58                 	db	88
  1924                           
  1925                           ;Config register CONFIG2H @ 0x300003
  1926                           ;	Watchdog Timer Enable bits
  1927                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  1928                           ;	Watchdog Timer Postscaler
  1929                           ;	WDTPS = 32768, 1:32768
  1930   300003                     	org	3145731
  1931   300003  3C                 	db	60
  1932                           
  1933                           ; Padding undefined space
  1934   300004                     	org	3145732
  1935   300004  FF                 	db	255
  1936                           
  1937                           ;Config register CONFIG3H @ 0x300005
  1938                           ;	CCP2 MUX bit
  1939                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  1940                           ;	PORTB A/D Enable bit
  1941                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  1942                           ;	Timer3 Clock Input MUX bit
  1943                           ;	T3CMX = RC0, T3CKI function is on RC0
  1944                           ;	SDO Output MUX bit
  1945                           ;	SDOMX = RB3, SDO function is on RB3
  1946                           ;	Master Clear Reset Pin Enable
  1947                           ;	MCLRE = ON, MCLR pin enabled; RE3 input disabled
  1948   300005                     	org	3145733
  1949   300005  D1                 	db	209
  1950                           
  1951                           ;Config register CONFIG4L @ 0x300006
  1952                           ;	Stack Full/Underflow Reset
  1953                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1954                           ;	Single-Supply ICSP Enable bit
  1955                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
  1956                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  1957                           ;	ICPRT = OFF, ICPORT disabled
  1958                           ;	Extended Instruction Set Enable bit
  1959                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  1960                           ;	Background Debugger Enable bit
  1961                           ;	DEBUG = 0x1, unprogrammed default
  1962   300006                     	org	3145734
  1963   300006  85                 	db	133
  1964                           
  1965                           ; Padding undefined space
  1966   300007                     	org	3145735
  1967   300007  FF                 	db	255
  1968                           
  1969                           ;Config register CONFIG5L @ 0x300008
  1970                           ;	Block 0 Code Protect
  1971                           ;	CP0 = OFF, Block 0 is not code-protected
  1972                           ;	Block 1 Code Protect
  1973                           ;	CP1 = OFF, Block 1 is not code-protected
  1974                           ;	Block 2 Code Protect
  1975                           ;	CP2 = OFF, Block 2 is not code-protected
  1976                           ;	Block 3 Code Protect
  1977                           ;	CP3 = OFF, Block 3 is not code-protected
  1978   300008                     	org	3145736
  1979   300008  0F                 	db	15
  1980                           
  1981                           ;Config register CONFIG5H @ 0x300009
  1982                           ;	Boot Block Code Protect
  1983                           ;	CPB = OFF, Boot block is not code-protected
  1984                           ;	Data EEPROM Code Protect
  1985                           ;	CPD = OFF, Data EEPROM is not code-protected
  1986   300009                     	org	3145737
  1987   300009  C0                 	db	192
  1988                           
  1989                           ;Config register CONFIG6L @ 0x30000A
  1990                           ;	Block 0 Write Protect
  1991                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  1992                           ;	Block 1 Write Protect
  1993                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  1994                           ;	Block 2 Write Protect
  1995                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  1996                           ;	Block 3 Write Protect
  1997                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  1998   30000A                     	org	3145738
  1999   30000A  0F                 	db	15
  2000                           
  2001                           ;Config register CONFIG6H @ 0x30000B
  2002                           ;	Configuration Registers Write Protect
  2003                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2004                           ;	Boot Block Write Protect
  2005                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  2006                           ;	Data EEPROM Write Protect
  2007                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2008   30000B                     	org	3145739
  2009   30000B  E0                 	db	224
  2010                           
  2011                           ;Config register CONFIG7L @ 0x30000C
  2012                           ;	Block 0 Table Read Protect
  2013                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  2014                           ;	Block 1 Table Read Protect
  2015                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  2016                           ;	Block 2 Table Read Protect
  2017                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  2018                           ;	Block 3 Table Read Protect
  2019                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  2020   30000C                     	org	3145740
  2021   30000C  0F                 	db	15
  2022                           
  2023                           ;Config register CONFIG7H @ 0x30000D
  2024                           ;	Boot Block Table Read Protect
  2025                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  2026   30000D                     	org	3145741
  2027   30000D  40                 	db	64
  2028                           tosu	equ	0xFFF
  2029                           tosh	equ	0xFFE
  2030                           tosl	equ	0xFFD
  2031                           stkptr	equ	0xFFC
  2032                           pclatu	equ	0xFFB
  2033                           pclath	equ	0xFFA
  2034                           pcl	equ	0xFF9
  2035                           tblptru	equ	0xFF8
  2036                           tblptrh	equ	0xFF7
  2037                           tblptrl	equ	0xFF6
  2038                           tablat	equ	0xFF5
  2039                           prodh	equ	0xFF4
  2040                           prodl	equ	0xFF3
  2041                           indf0	equ	0xFEF
  2042                           postinc0	equ	0xFEE
  2043                           postdec0	equ	0xFED
  2044                           preinc0	equ	0xFEC
  2045                           plusw0	equ	0xFEB
  2046                           fsr0h	equ	0xFEA
  2047                           fsr0l	equ	0xFE9
  2048                           wreg	equ	0xFE8
  2049                           indf1	equ	0xFE7
  2050                           postinc1	equ	0xFE6
  2051                           postdec1	equ	0xFE5
  2052                           preinc1	equ	0xFE4
  2053                           plusw1	equ	0xFE3
  2054                           fsr1h	equ	0xFE2
  2055                           fsr1l	equ	0xFE1
  2056                           bsr	equ	0xFE0
  2057                           indf2	equ	0xFDF
  2058                           postinc2	equ	0xFDE
  2059                           postdec2	equ	0xFDD
  2060                           preinc2	equ	0xFDC
  2061                           plusw2	equ	0xFDB
  2062                           fsr2h	equ	0xFDA
  2063                           fsr2l	equ	0xFD9
  2064                           status	equ	0xFD8

Data Sizes:
    Strings     27
    Constant    0
    Data        4
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     25      29
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_3(CODE[10]), STR_2(CODE[10]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR_timer0 in COMRAM

    _ISR_timer0->i2_Lcd_Write_String
    i2_Lcd_Write_String->i2_Lcd_Write_Char
    i2_Lcd_Write_Char->i2_Lcd_Port
    i2_Lcd_Set_Cursor->i2_Lcd_Cmd
    i2_Lcd_Cmd->i2_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR_timer0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_timer0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_timer0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_timer0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_timer0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_timer0 in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_timer0 in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_timer0 in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1514
                                             24 COMRAM     1     1      0
                           _InitPort
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                             _Timer0
 ---------------------------------------------------------------------------------
 (1) _Timer0                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     6     4      2     412
                                             18 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                             15 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     817
                                             17 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     210
                                             17 COMRAM     1     1      0
                          _Lcd_Clear
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0      75
                                             15 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitPort                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR_timer0                                           4     4      0     970
                                             10 COMRAM     4     4      0
                   i2_Lcd_Set_Cursor
                 i2_Lcd_Write_String
 ---------------------------------------------------------------------------------
 (6) i2_Lcd_Write_String                                   6     4      2     294
                                              4 COMRAM     6     4      2
                   i2_Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (7) i2_Lcd_Write_Char                                     3     3      0     178
                                              1 COMRAM     3     3      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (6) i2_Lcd_Set_Cursor                                     5     4      1     676
                                              3 COMRAM     5     4      1
                          i2_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (7) i2_Lcd_Cmd                                            2     2      0     110
                                              1 COMRAM     2     2      0
                         i2_Lcd_Port
 ---------------------------------------------------------------------------------
 (8) i2_Lcd_Port                                           1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitPort
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Clear
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Timer0

 _ISR_timer0 (ROOT)
   i2_Lcd_Set_Cursor
     i2_Lcd_Cmd
       i2_Lcd_Port
   i2_Lcd_Write_String
     i2_Lcd_Write_Char
       i2_Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      31        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     19      1D       1       30.9%
BITBIGSFRhhhhll     3F      0       0      22        0.0%
BITBIGSFRhll        24      0       0      27        0.0%
BITBIGSFRhhhhlh     1A      0       0      21        0.0%
BITBIGSFRhhhhh       D      0       0      20        0.0%
BITBIGSFRll          8      0       0      29        0.0%
BITBIGSFRhlh         6      0       0      26        0.0%
BITBIGSFRhhhll       5      0       0      24        0.0%
BITBIGSFRhhhlh       1      0       0      23        0.0%
BITBIGSFRhhl         1      0       0      25        0.0%
BITBIGSFRlh          1      0       0      28        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1D      30        0.0%
DATA                 0      0      1D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Thu Jun 22 18:48:49 2023

                        l42 0D1C                          l39 0D04                          l71 0ADC  
                        l82 0B0A                          l75 0AF2                          l67 0AC6  
                        l85 0CC8                          l94 08EE                          l79 0B08  
                        l88 0D2A                          l98 08EE                          u10 0AC0  
                        u11 0ABC                          u20 0AD6                          u21 0AD2  
                        u30 0AEC                          u31 0AE8                          u40 0B02  
                        u41 0AFE                         l101 0A42                         l110 0BBC  
                       l104 0C46                         l841 0ADE                         l833 0AB2  
                       l843 0AEC                         l835 0AC0                         l851 0CAE  
                       l931 0D14                         l845 0AF4                         l837 0AC8  
                       l853 0CB4                         l941 09D4                         l933 0D18  
                       l927 0CEA                         l847 0B02                         l839 0AD6  
                       l855 0CB6                         l951 0A0E                         l943 09E4  
                       l935 0D1A                         l857 0CC6                         l849 0CAC  
                       l961 0A2C                         l953 0A14                         l945 09EA  
                       l937 09C2                         l881 0C24                         l929 0D06  
                       l875 0D1E                         l963 0A32                         l955 0A1A  
                       l947 09F8                         l939 09CE                         l891 0C3C  
                       l883 0C2C                         l965 0A38                         l957 0A20  
                       l949 09FE                         l893 0C3E                         l885 0C2E  
                       l877 0C16                         l967 0A3E                         l959 0A26  
                       l895 0C44                         l887 0C34                         l879 0C22  
                       l889 0C36                         u330 0830                         u331 082C  
                       u340 0864                         u341 0860                         u350 0898  
                       u430 0A78                         u351 0894                         u431 0A74  
                       u360 08CC                         u361 08C8                         u370 0BBC  
                       u507 0A04                         u371 0BB8                         u517 0CBC  
                       u457 0A7E                         u467 0C30                         u477 0C40  
                       u487 09DA                         u497 09F0                         wreg 0FE8  
                      l1251 0852                        l1243 0820                        l1331 0A78  
                      l1323 0A44                        l1261 0898                        l1253 0864  
                      l1245 0830                        l1341 0AA6                        l1333 0A88  
                      l1325 0A54                        l1271 08DE                        l1263 08AA  
                      l1255 0876                        l1247 0842                        l1335 0A8C  
                      l1327 0A5E                        l1273 08E4                        l1265 08B0  
                      l1257 087C                        l1249 0848                        l1281 0B94  
                      l1337 0A90                        l1329 0A6A                        l1267 08BA  
                      l1259 0886                        l1275 0B68                        l1339 0A9A  
                      l1269 08CC                        l1277 0B74                        l1279 0B90  
                      STR_1 0815                        STR_2 080B                        STR_3 0801  
                      _LATA 0F89                        _LATC 0F8B                        i2l71 0B38  
                      i2l57 0042                        i2l82 0B66                        i2l75 0B4E  
                      i2l67 0B22                        i2l85 0CE8                        i2l94 09C0  
                      i2l79 0B64                        i2l98 09C0           ?_Lcd_Write_String 0013  
                      _main 0A44                        fsr1l 0FE1                        btemp 001E  
                      start 0056          ??_Lcd_Write_String 0015             __end_of_Lcd_Cmd 0CCA  
              ___param_bank 0000                       ?_main 0001                       i2l110 0C12  
                     i2l104 0C7A                       _TMR0H 0FD7                       _TMR0L 0FD6  
                     _TRISA 0F92                       _TRISC 0F94                 ?_ISR_timer0 0001  
                     _carga 001A                 ?i2_Lcd_Port 0001                       tablat 0FF5  
                     ttemp5 001F                       ttemp6 0022                       ttemp7 0026  
                     status 0FD8                       wtemp8 001F            i2_Lcd_Set_Cursor 08F0  
          __end_of_Lcd_Init 0A44            __end_of_Lcd_Port 0B0C             __initialization 0C7C  
              __end_of_main 0AB0            __end_of_InitPort 0D06                      ??_main 0019  
             __activetblptr 0002                      _ANSELA 0F5B                      _ANSELC 0F5D  
                    i2l1201 0B24                      i2l1211 0B5E                      i2l1203 0B32  
                    i2l1205 0B3A                      i2l1221 0CE6                      i2l1213 0CCC  
                    i2l1301 096A                      i2l1207 0B48                      i2l1215 0CCE  
                    i2l1311 09B0                      i2l1303 097C                      i2l1231 0C62  
                    i2l1223 0C4A                      i2l1209 0B50                      i2l1217 0CD4  
                    i2l1313 09B6                      i2l1305 0982                      i2l1241 0C78  
                    i2l1233 0C68                      i2l1225 0C56                      i2l1321 0BEA  
                    i2l1219 0CD6                      i2l1307 098C                      i2l1235 0C6A  
                    i2l1227 0C58                      i2l1315 0BBE                      i2l1309 099E  
                    i2l1237 0C70                      i2l1229 0C60                      i2l1317 0BCA  
                    i2l1239 0C72                      i2l1319 0BE6                      i2l1351 0040  
                    i2l1343 001A                      i2l1345 0028                      i2l1291 0924  
                    i2l1283 08F2                      i2l1347 0032                      i2l1197 0B0E  
                    i2l1293 0936                      i2l1285 0902                      i2l1349 003E  
                    i2l1199 0B1C                      i2l1295 0948                      i2l1287 0914  
                    i2l1297 094E                      i2l1289 091A                      i2l1299 0958  
                 ??_Lcd_Cmd 0010                      _Timer0 0D06           __end_ofi2_Lcd_Cmd 0CEA  
       i2Lcd_Write_String@a 0005         i2Lcd_Write_String@i 0009                      isa$std 0001  
          i2_Lcd_Write_Char 0C48                __pdataCOMRAM 001A                __mediumconst 0000  
                    tblptrh 0FF7                      tblptrl 0FF6                      tblptru 0FF8  
           Lcd_Set_Cursor@a 0013             Lcd_Set_Cursor@b 0012             Lcd_Set_Cursor@y 0015  
           Lcd_Set_Cursor@z 0014                  __accesstop 0060     __end_of__initialization 0C9C  
         __end_of_Lcd_Clear 0D2C               ___rparam_used 0001              __pcstackCOMRAM 0001  
         i2Lcd_Write_Char@a 0004           i2Lcd_Write_Char@y 0003              _Lcd_Set_Cursor 081E  
                 ?_Lcd_Init 0001                   ?_Lcd_Port 0001        i2Lcd_Write_Char@temp 0002  
                 ?_InitPort 0001                     ?_Timer0 0001        i2Lcd_Set_Cursor@temp 0008  
    __end_of_Lcd_Set_Cursor 08F0    __end_ofi2_Lcd_Set_Cursor 09C2                ??_ISR_timer0 000B  
                   i2u30_40 0B32                     i2u30_41 0B2E                     i2u31_40 0B48  
                   i2u31_41 0B44                     i2u32_40 0B5E                     i2u40_40 096A  
                   i2u32_41 0B5A                     i2u40_41 0966                     i2u41_40 099E  
                   i2u41_41 099A                     i2u42_40 0C12                     i2u42_41 0C0E  
                   i2u44_40 0028                     i2u44_41 0024                     i2u52_47 0C64  
                   i2u29_40 0B1C                     i2u29_41 0B18                     i2u53_47 0C74  
                   i2u38_40 0902                     i2u38_41 08FE                     i2u54_47 0CDC  
                   i2u39_40 0936                     i2u39_41 0932                  ??_Lcd_Init 0012  
              ??i2_Lcd_Port 0001                  ??_Lcd_Port 000F              _Lcd_Write_Char 0C14  
                ??_InitPort 000F                     _Lcd_Cmd 0CAA                     __Hparam 0000  
                   __Lparam 0000          __end_of_ISR_timer0 0056                __psmallconst 0800  
        __end_ofi2_Lcd_Port 0B68                     __pcinit 0C7C                     __ramtop 0800  
           ?_Lcd_Set_Cursor 0012                     __ptext0 0A44                     __ptext1 0D06  
                   __ptext2 0B68                     __ptext3 0C14                     __ptext4 081E  
                   __ptext5 09C2                     __ptext6 0D1E                     __ptext7 0CAA  
                   __ptext8 0AB0                     __ptext9 0CEA                   _T0CONbits 0FD5  
    __end_of_Lcd_Write_Char 0C48        end_of_initialization 0C9C               __Lmediumconst 0000  
  __end_ofi2_Lcd_Write_Char 0C7C                     postdec1 0FE5                     postinc0 0FEE  
                 Lcd_Port@a 000F                   i2_Lcd_Cmd 0CCA                   _PORTCbits 0F82  
                 _TRISDbits 0F95             ?_Lcd_Write_Char 0001           Lcd_Write_String@a 0013  
         Lcd_Write_String@i 0017                   _Lcd_Clear 0D1E              __end_of_Timer0 0D1E  
          _Lcd_Write_String 0B68               __pidataCOMRAM 0D2C                  ?i2_Lcd_Cmd 0001  
       start_initialization 0C7C                    ??_Timer0 000F                  ?_Lcd_Clear 0001  
__end_ofi2_Lcd_Write_String 0C14             Lcd_Write_Char@a 0012             Lcd_Write_Char@y 0011  
         ?i2_Lcd_Set_Cursor 0004          ??i2_Lcd_Set_Cursor 0005                    ?_Lcd_Cmd 0001  
          ??_Lcd_Set_Cursor 0013                   __pintcode 0008                 ??i2_Lcd_Cmd 0002  
               __smallconst 0800                    _LATAbits 0F89                    _LATDbits 0F8C  
         ?i2_Lcd_Write_Char 0001                    Lcd_Cmd@a 0011          ??i2_Lcd_Write_Char 0002  
               ??_Lcd_Clear 0012            ??_Lcd_Write_Char 0010                    _Lcd_Init 09C2  
                  _Lcd_Port 0AB0                   copy_data0 0C90    __end_of_Lcd_Write_String 0BBE  
                  _InitPort 0CEA                    __Hrparam 0000                    __Lrparam 0000  
                  __ptext11 0BBE                    __ptext12 0C48                    __ptext13 08F0  
                  __ptext14 0CCA                    __ptext15 0B0C                    isa$xinst 0000  
                  int$flags 001E                 i2Lcd_Port@a 0001                  _INTCONbits 0FF2  
        i2_Lcd_Write_String 0BBE          Lcd_Write_Char@temp 0010                    intlevel2 0000  
       ?i2_Lcd_Write_String 0005           i2Lcd_Set_Cursor@a 0005           i2Lcd_Set_Cursor@b 0004  
         i2Lcd_Set_Cursor@y 0007           i2Lcd_Set_Cursor@z 0006                  i2Lcd_Cmd@a 0003  
      ??i2_Lcd_Write_String 0007          Lcd_Set_Cursor@temp 0016                  _ISR_timer0 0008  
                i2_Lcd_Port 0B0C  
